{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/bear_mj.png","path":"images/bear_mj.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/header.png","path":"images/header.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1545105323000},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1545105323000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1545105323000},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1545105323000},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1545105323000},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1545105323000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1545105323000},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1545105323000},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1545105323000},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1545105323000},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1545105323000},{"_id":"themes/next/_config.yml","hash":"32e0fc80084029d43ff0a8ad4a44225c4b6f1b7a","modified":1545105323000},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1545105323000},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1545105323000},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1545105323000},{"_id":"source/categories/index.md","hash":"398f3c09375c0564e6d971ed4e284f636d75fa68","modified":1545105323000},{"_id":"source/tags/index.md","hash":"e0ee34cdc126653f20b8059328ed34b9c94090bc","modified":1545105323000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1545105323000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1545105323000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1545105323000},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1545105323000},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1545105323000},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1545105323000},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1545105323000},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1545105323000},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1545105323000},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1545105323000},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1545105323000},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1545105323000},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1545105323000},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1545105323000},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1545105323000},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1545105323000},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1545105323000},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1545105323000},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1545105323000},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1545105323000},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1545105323000},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1545105323000},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1545105323000},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1545105323000},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1545105323000},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1545105323000},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1545105323000},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1545105323000},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1545105323000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1545105323000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1545105323000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1545105323000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1545105323000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545105323000},{"_id":"source/_posts/Algorithm/┐ь╦┘┼┼╨Є.md","hash":"c9ebd823349cda68c2cd08df3dae3e3b01815227","modified":1545105323000},{"_id":"source/_posts/Algorithm/┼┼╨Є.md","hash":"3e423b816c6fc2017538dd677fc6df7870d3d560","modified":1545105323000},{"_id":"source/_posts/Algorithm/╔в┴╨▒э.md","hash":"62f34a770b3a5314d60ecb3cffbe6b9388740351","modified":1545105323000},{"_id":"source/_posts/Algorithm/╢╤┼┼╨Є.md","hash":"40b6ca94158c3e542e8c2339fd3bf7a36432515c","modified":1545105323000},{"_id":"source/_posts/Algorithm/╢■▓ц╦╤╦ў╩ў.md","hash":"56bd05b7c72287a05ffe193f2838cdb6b09813b2","modified":1545105323000},{"_id":"source/_posts/Algorithm/╣щ▓в┼┼╨Є.md","hash":"2d1cfeae05a7e9d4ed12737f9f65ff21575e7645","modified":1545105323000},{"_id":"source/_posts/Linux/.sync_ignore","hash":"55537fcddb6a3b86d1a80c345ce41e7292c6481e","modified":1545105323000},{"_id":"source/_posts/Linux/Git░▓╫░┼ф╓├║═╩╣╙├.md","hash":"501ef6d45bffe4b8cadf3b024c24228bfb7cc329","modified":1545105323000},{"_id":"source/_posts/Linux/Httpd╬─╝■╖■╬ё╞ў.md","hash":"e9b2b6adef25575a8bb67a9c6f7ae8f45d546819","modified":1545105323000},{"_id":"source/_posts/Linux/Kubernetes.md","hash":"6770e48c77a3cbf04e8e7e4ced7c36e19a155120","modified":1545105323000},{"_id":"source/_posts/Linux/Linux│г╙├├№┴ю.md","hash":"2c52c09745771d7f23b032c98aae938d4d615087","modified":1545105323000},{"_id":"source/_posts/Linux/Markdown▒╩╝╟.md","hash":"a03b08ec95e81d79289c95632165c2cabfeceb0d","modified":1545105323000},{"_id":"source/_posts/Linux/Vim╗∙▒╛▓┘╫ў.md","hash":"a4d08e9bde0233eafb0b968340fd6b4f2ab498cb","modified":1545105323000},{"_id":"source/_posts/Practice/.sync_ignore","hash":"b81f2bd4ec5984f70567e6096c91e1492ce0bf11","modified":1545105323000},{"_id":"source/_posts/Practice/┼╖└н╝╞╗о╡┌╚¤╠т.md","hash":"e0d6165a22d24953b68b5292c290524b265909f9","modified":1545105323000},{"_id":"source/_posts/Practice/┼╖└н╝╞╗о╡┌╢■╠т.md","hash":"3e47fffcecc952225cdd4e89cc0be48f39fffc5e","modified":1545105323000},{"_id":"source/_posts/Practice/┼╖└н╝╞╗о╡┌╥╗╠т.md","hash":"0c7b8cfe39c5f637f93bf47901a7554c0e387e0c","modified":1545105323000},{"_id":"source/_posts/Practice/╦в╠т▒╩╝╟.md","hash":"e9efb2c54ae1746f93d03dbe6c3a097c0b2fa2bb","modified":1545105323000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1545105323000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1545105323000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1545105323000},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1545105323000},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1545105323000},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1545105323000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1545105323000},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1545105323000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1545105323000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"a97b0b91a7982b6fdcc1fc565f6e58cc758b1cf5","modified":1545105323000},{"_id":"themes/next/layout/_partials/head.swig","hash":"d0e4b4ca98d624babb6cba6e7e352610287abe7a","modified":1545105323000},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1545105323000},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1545105323000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1545105323000},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1545105323000},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1545105323000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1545105323000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1545105323000},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1545105323000},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1545105323000},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1545105323000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1545105323000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1545105323000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1545105323000},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1545105323000},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1545105323000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1545105323000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1545105323000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1545105323000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1545105323000},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1545105323000},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1545105323000},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1545105323000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1545105323000},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1545105323000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1545105323000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1545105323000},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1545105323000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1545105323000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1545105323000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1545105323000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1545105323000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1545105323000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1545105323000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1545105323000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1545105323000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1545105323000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1545105323000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1545105323000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1545105323000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1545105323000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1545105323000},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1545105323000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545105323000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545105323000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545105323000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545105323000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545105323000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545105323000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1545105323000},{"_id":"source/_posts/Algorithm/image/Heap1.jpg","hash":"0e4273eef9181c8b7f4642238c4beea71b3a5759","modified":1545105323000},{"_id":"source/_posts/Algorithm/image/QuickSort.jpg","hash":"1eda4b9c7a5e208ed6a914aa03cb7b8ced905742","modified":1545105323000},{"_id":"source/_posts/Algorithm/image/hash1.png","hash":"02488ae5627c96e3df0fcccc2763b0f662765219","modified":1545105323000},{"_id":"source/_posts/Algorithm/image/heap2.jpg","hash":"e239b0eb65f242c76f59e6aef0cb8a2150fb549a","modified":1545105323000},{"_id":"source/_posts/Algorithm/image/heap3.jpg","hash":"e01311988abec1a436ed960653b9afd84a85818f","modified":1545105323000},{"_id":"source/_posts/Algorithm/image/heap4.jpg","hash":"8148bc140bbb144395cab6f4ad6f18050f2cdb23","modified":1545105323000},{"_id":"source/_posts/Linux/image/k8s.JPG","hash":"84f468ade0f785ff4f270b08603a880101079956","modified":1545105323000},{"_id":"source/_posts/Linux/image/k8s1.JPG","hash":"491f5b56cac55a01f2a965ce0dc511cb050fe6fa","modified":1545105323000},{"_id":"source/_posts/Linux/image/logo.png","hash":"edf203d682f3c4f2856fcbb499f955e8562470e3","modified":1545105323000},{"_id":"source/_posts/Linux/image/ssh1.jpg","hash":"6aed72c6133f35fa1fdf7cbbdb75ef682a27b694","modified":1545105323000},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1545105323000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1545105323000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1545105323000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1545105323000},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1545105323000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1545105323000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1545105323000},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1545105323000},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1545105323000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1545105323000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1545105323000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1545105323000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1545105323000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1545105323000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1545105323000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"4aa55cd424389cf5626aa019c15ef6f3e4da09f2","modified":1545105323000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1545105323000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1545105323000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1545105323000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1545105323000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1545105323000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1545105323000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1545105323000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1545105323000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1545105323000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1545105323000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1545105323000},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1545105323000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1545105323000},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1545105323000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1545105323000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1545105323000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1545105323000},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1545105323000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1545105323000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1545105323000},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1545105323000},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1545105323000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"df753386a7ae8775ccdb64b3ceee817990bfea51","modified":1545105323000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1545105323000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1545105323000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1545105323000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1545105323000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1545105323000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1545105323000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1545105323000},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1545105323000},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1545105323000},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1545105323000},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1545105323000},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1545105323000},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1545105323000},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1545105323000},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1545105323000},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1545105323000},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1545105323000},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1545105323000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1545105323000},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1545105323000},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1545105323000},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1545105323000},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1545105323000},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1545105323000},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1545105323000},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1545105323000},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1545105323000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1545105323000},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1545105323000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1545105323000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1545105323000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1545105323000},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1545105323000},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1545105323000},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1545105323000},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1545105323000},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1545105323000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1545105323000},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1545105323000},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1545105323000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1545105323000},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1545105323000},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1545105323000},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1545105323000},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1545105323000},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1545105323000},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1545105323000},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1545105323000},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1545105323000},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1545105323000},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1545105323000},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1545105323000},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1545105323000},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1545105323000},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1545105323000},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1545105323000},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1545105323000},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1545105323000},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1545105323000},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1545105323000},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1545105323000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1545105323000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1545105323000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1545105323000},{"_id":"source/_posts/Linux/image/k8s2.jpg","hash":"3dab042656fd8cde7a11afb3fc575e23532f7f24","modified":1545105323000},{"_id":"source/_posts/Linux/image/ssh2.jpg","hash":"d904b7317290ecf08cd80a4498f5684f17fbda17","modified":1545105323000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1545105323000},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1545105323000},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1545105323000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1545105323000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1545105323000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1545105323000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1545105323000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1545105323000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1545105323000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1545105323000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1545105323000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1545105323000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1545105323000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1545105323000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1545105323000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1545105323000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1545105323000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1545105323000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1545105323000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1545105323000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1545105323000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1545105323000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1545105323000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1545105323000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1545105323000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1545105323000},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1545105323000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1545105323000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1545105323000},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1545105323000},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1545105323000},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1545105323000},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1545105323000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1545105323000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1545105323000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1545105323000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1545105323000},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1545105323000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1545105323000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1545105323000},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1545105323000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1545105323000},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1545105323000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1545105323000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1545105323000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1545105323000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1545105323000},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1545105323000},{"_id":"themes/next/source/images/bear_mj.png","hash":"fed2daa76477f5bc0dbb50bbaf02b22dad16a6d3","modified":1545105323000},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1545105323000},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1545105323000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1545105323000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1545105323000},{"_id":"source/_posts/Algorithm/image/merge1.png","hash":"f70bcd2208b4b9811785000477bea5c91445404a","modified":1545105323000},{"_id":"source/_posts/Algorithm/image/merge2.png","hash":"18b1d6b0a7b0f1851ea16d1be9430dba69e6b353","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1545105323000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1545105323000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1545105323000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1545105323000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1545105323000},{"_id":"themes/next/source/images/header.png","hash":"a6c6135061095f0fcf151a6ccfb638ba3160eaf1","modified":1545105323000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1545105323000},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1545105323000},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1545105323000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1545105323000},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1545105323000},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1545105323000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1545105323000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1545105323000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1545105323000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1545105323000},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1545105323000},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1545105323000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1545105323000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1545105323000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1545105323000},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1545105323000},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1545105323000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1545105323000}],"Category":[{"name":"Algorithm","_id":"cjptii4cs0004afpphee19iye"},{"name":"Linux","_id":"cjptii4fq000oafppx2w34j22"},{"name":"Practice","_id":"cjptii4h4001hafpp0d4ynp8j"}],"Data":[],"Page":[{"title":"categories","date":"2018-12-10T21:34:33.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-12-10 21:34:33\ntype: categories\n---\n","updated":"2018-12-18T03:55:23.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjptii3un0000afppstnxd7y3","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2018-12-10T21:34:13.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-12-10 21:34:13\ntype: tags\n---\n","updated":"2018-12-18T03:55:23.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjptii3v70001afpplx11w2l6","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"date":"2018-10-31T11:06:00.000Z","status":"public","title":"快速排序","_content":"\n## 快排\n>参考书籍 《算法导论》\n\n#### 快排特点\n- 分治思想\n- 原址排序\n- T(n)=nlgn\n\n#### 快排缺点\n- 最坏时间复杂度 T(n)=n^2\n- 不稳定排序\n\n#### 快排步骤：\n**Partition**\n1.取基准数x，一般取最后一个\n`base=A[n]`\n2.小于base基数的放在左边，大于基数的base放在右边\n3.base放到两数之间，base就已经排好了序\n\n**QuickSort**\n- 除去base，左右两边分治，递归调用，快排完成\n\n![QuickSort](./image/QuickSort.jpg)\n\n----\n\n#### C++代码\n```C++\n/* filename: Quick_sort.cpp\n*\n* Author:   xblin\n*/\n\n#include <iostream>\nusing namespace std;\n\n/************** 数组的划分函数 **************************/\nint Partition(int A[], int left, int right){\n\tint base = A[right];    //取最后一个为基准数\n\tint j = left;           //location\n\tfor (int i = left; i < right; i++){\n\t\tif (A[i] < base)                  //小于base的放左边，大于base的放右边\n\t\t\tstd::swap(A[i], A[j++]);      //标准库的交换变量函数\n\t}\n\tstd::swap(A[j], A[right]);            //base放到两数之间\n\n\treturn j;   //返回中间base的下标\n}\n\n/************** 快排的递归调用函数 *****************/\nvoid QuickSort(int A[], int left, int right){\n\tif (left < right){\n\t\tint base = Partition(A, left, right);\n\t\tQuickSort(A, left, base - 1);\n\t\tQuickSort(A, base + 1, right);\n\t}\n}\n\nint main(int argc, char **argv){\n\tint aa[] = { 2, 8, 7, 1, 3, 5, 6, 4 };\n\tint Array_size = sizeof(aa) / sizeof(int); \n\n\tQuickSort(aa, 0, Array_size-1);    //快排\n\tfor (int i = 0; i < Array_size; i++)\n \t\tcout << aa[i] << endl;\n}\n```\n\n----\n\n## 快排的优化\n\n快排最坏情况下的时间复杂度T(n)=n2，\neg：6,5,4,3,2,1；  且base取最后一个1。\n要减小此概率的发生，base就要随机取一个\n\n添加伪代码：\n思想：先随机取一个base，交换放到数组最后就行，然后正常调用Parition函数。\n```\nRandom_partition(A, l, r)\n    i=Random(l, r)\n    swap(A[r], A[i])\n    return Partition(A, l, r)\n```\n","source":"_posts/Algorithm/┐ь╦┘┼┼╨Є.md","raw":"---\ndate: 2018-10-31 11:06\nstatus: public\ntitle: 快速排序\ncategories: Algorithm\ntags: Algorithm\n---\n\n## 快排\n>参考书籍 《算法导论》\n\n#### 快排特点\n- 分治思想\n- 原址排序\n- T(n)=nlgn\n\n#### 快排缺点\n- 最坏时间复杂度 T(n)=n^2\n- 不稳定排序\n\n#### 快排步骤：\n**Partition**\n1.取基准数x，一般取最后一个\n`base=A[n]`\n2.小于base基数的放在左边，大于基数的base放在右边\n3.base放到两数之间，base就已经排好了序\n\n**QuickSort**\n- 除去base，左右两边分治，递归调用，快排完成\n\n![QuickSort](./image/QuickSort.jpg)\n\n----\n\n#### C++代码\n```C++\n/* filename: Quick_sort.cpp\n*\n* Author:   xblin\n*/\n\n#include <iostream>\nusing namespace std;\n\n/************** 数组的划分函数 **************************/\nint Partition(int A[], int left, int right){\n\tint base = A[right];    //取最后一个为基准数\n\tint j = left;           //location\n\tfor (int i = left; i < right; i++){\n\t\tif (A[i] < base)                  //小于base的放左边，大于base的放右边\n\t\t\tstd::swap(A[i], A[j++]);      //标准库的交换变量函数\n\t}\n\tstd::swap(A[j], A[right]);            //base放到两数之间\n\n\treturn j;   //返回中间base的下标\n}\n\n/************** 快排的递归调用函数 *****************/\nvoid QuickSort(int A[], int left, int right){\n\tif (left < right){\n\t\tint base = Partition(A, left, right);\n\t\tQuickSort(A, left, base - 1);\n\t\tQuickSort(A, base + 1, right);\n\t}\n}\n\nint main(int argc, char **argv){\n\tint aa[] = { 2, 8, 7, 1, 3, 5, 6, 4 };\n\tint Array_size = sizeof(aa) / sizeof(int); \n\n\tQuickSort(aa, 0, Array_size-1);    //快排\n\tfor (int i = 0; i < Array_size; i++)\n \t\tcout << aa[i] << endl;\n}\n```\n\n----\n\n## 快排的优化\n\n快排最坏情况下的时间复杂度T(n)=n2，\neg：6,5,4,3,2,1；  且base取最后一个1。\n要减小此概率的发生，base就要随机取一个\n\n添加伪代码：\n思想：先随机取一个base，交换放到数组最后就行，然后正常调用Parition函数。\n```\nRandom_partition(A, l, r)\n    i=Random(l, r)\n    swap(A[r], A[i])\n    return Partition(A, l, r)\n```\n","slug":"Algorithm/┐ь╦┘┼┼╨Є","published":1,"updated":"2018-12-18T03:55:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjptii4c40002afppucst6peb","content":"<h2 id=\"快排\"><a href=\"#快排\" class=\"headerlink\" title=\"快排\"></a>快排</h2><blockquote>\n<p>参考书籍 《算法导论》</p>\n</blockquote>\n<h4 id=\"快排特点\"><a href=\"#快排特点\" class=\"headerlink\" title=\"快排特点\"></a>快排特点</h4><ul>\n<li>分治思想</li>\n<li>原址排序</li>\n<li>T(n)=nlgn</li>\n</ul>\n<h4 id=\"快排缺点\"><a href=\"#快排缺点\" class=\"headerlink\" title=\"快排缺点\"></a>快排缺点</h4><ul>\n<li>最坏时间复杂度 T(n)=n^2</li>\n<li>不稳定排序</li>\n</ul>\n<h4 id=\"快排步骤：\"><a href=\"#快排步骤：\" class=\"headerlink\" title=\"快排步骤：\"></a>快排步骤：</h4><p><strong>Partition</strong><br>1.取基准数x，一般取最后一个<br><code>base=A[n]</code><br>2.小于base基数的放在左边，大于基数的base放在右边<br>3.base放到两数之间，base就已经排好了序</p>\n<p><strong>QuickSort</strong></p>\n<ul>\n<li>除去base，左右两边分治，递归调用，快排完成</li>\n</ul>\n<p><img src=\"./image/QuickSort.jpg\" alt=\"QuickSort\"></p>\n<hr>\n<h4 id=\"C-代码\"><a href=\"#C-代码\" class=\"headerlink\" title=\"C++代码\"></a>C++代码</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* filename: Quick_sort.cpp</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* Author:   xblin</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/************** 数组的划分函数 **************************/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Partition</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> base = A[right];    <span class=\"comment\">//取最后一个为基准数</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> j = left;           <span class=\"comment\">//location</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = left; i &lt; right; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (A[i] &lt; base)                  <span class=\"comment\">//小于base的放左边，大于base的放右边</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">std</span>::swap(A[i], A[j++]);      <span class=\"comment\">//标准库的交换变量函数</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::swap(A[j], A[right]);            <span class=\"comment\">//base放到两数之间</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> j;   <span class=\"comment\">//返回中间base的下标</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/************** 快排的递归调用函数 *****************/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QuickSort</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (left &lt; right)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> base = Partition(A, left, right);</span><br><span class=\"line\">\t\tQuickSort(A, left, base - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tQuickSort(A, base + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> aa[] = &#123; <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">7</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span> &#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> Array_size = <span class=\"keyword\">sizeof</span>(aa) / <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>); </span><br><span class=\"line\"></span><br><span class=\"line\">\tQuickSort(aa, <span class=\"number\">0</span>, Array_size<span class=\"number\">-1</span>);    <span class=\"comment\">//快排</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; Array_size; i++)</span><br><span class=\"line\"> \t\t<span class=\"built_in\">cout</span> &lt;&lt; aa[i] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"快排的优化\"><a href=\"#快排的优化\" class=\"headerlink\" title=\"快排的优化\"></a>快排的优化</h2><p>快排最坏情况下的时间复杂度T(n)=n2，<br>eg：6,5,4,3,2,1；  且base取最后一个1。<br>要减小此概率的发生，base就要随机取一个</p>\n<p>添加伪代码：<br>思想：先随机取一个base，交换放到数组最后就行，然后正常调用Parition函数。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Random_partition(A, l, r)</span><br><span class=\"line\">    i=Random(l, r)</span><br><span class=\"line\">    swap(A[r], A[i])</span><br><span class=\"line\">    return Partition(A, l, r)</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"快排\"><a href=\"#快排\" class=\"headerlink\" title=\"快排\"></a>快排</h2><blockquote>\n<p>参考书籍 《算法导论》</p>\n</blockquote>\n<h4 id=\"快排特点\"><a href=\"#快排特点\" class=\"headerlink\" title=\"快排特点\"></a>快排特点</h4><ul>\n<li>分治思想</li>\n<li>原址排序</li>\n<li>T(n)=nlgn</li>\n</ul>\n<h4 id=\"快排缺点\"><a href=\"#快排缺点\" class=\"headerlink\" title=\"快排缺点\"></a>快排缺点</h4><ul>\n<li>最坏时间复杂度 T(n)=n^2</li>\n<li>不稳定排序</li>\n</ul>\n<h4 id=\"快排步骤：\"><a href=\"#快排步骤：\" class=\"headerlink\" title=\"快排步骤：\"></a>快排步骤：</h4><p><strong>Partition</strong><br>1.取基准数x，一般取最后一个<br><code>base=A[n]</code><br>2.小于base基数的放在左边，大于基数的base放在右边<br>3.base放到两数之间，base就已经排好了序</p>\n<p><strong>QuickSort</strong></p>\n<ul>\n<li>除去base，左右两边分治，递归调用，快排完成</li>\n</ul>\n<p><img src=\"./image/QuickSort.jpg\" alt=\"QuickSort\"></p>\n<hr>\n<h4 id=\"C-代码\"><a href=\"#C-代码\" class=\"headerlink\" title=\"C++代码\"></a>C++代码</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* filename: Quick_sort.cpp</span></span><br><span class=\"line\"><span class=\"comment\">*</span></span><br><span class=\"line\"><span class=\"comment\">* Author:   xblin</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/************** 数组的划分函数 **************************/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">Partition</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> base = A[right];    <span class=\"comment\">//取最后一个为基准数</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> j = left;           <span class=\"comment\">//location</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = left; i &lt; right; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (A[i] &lt; base)                  <span class=\"comment\">//小于base的放左边，大于base的放右边</span></span><br><span class=\"line\">\t\t\t<span class=\"built_in\">std</span>::swap(A[i], A[j++]);      <span class=\"comment\">//标准库的交换变量函数</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">std</span>::swap(A[j], A[right]);            <span class=\"comment\">//base放到两数之间</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> j;   <span class=\"comment\">//返回中间base的下标</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/************** 快排的递归调用函数 *****************/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">QuickSort</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (left &lt; right)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> base = Partition(A, left, right);</span><br><span class=\"line\">\t\tQuickSort(A, left, base - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tQuickSort(A, base + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> aa[] = &#123; <span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">7</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">4</span> &#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> Array_size = <span class=\"keyword\">sizeof</span>(aa) / <span class=\"keyword\">sizeof</span>(<span class=\"keyword\">int</span>); </span><br><span class=\"line\"></span><br><span class=\"line\">\tQuickSort(aa, <span class=\"number\">0</span>, Array_size<span class=\"number\">-1</span>);    <span class=\"comment\">//快排</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; Array_size; i++)</span><br><span class=\"line\"> \t\t<span class=\"built_in\">cout</span> &lt;&lt; aa[i] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"快排的优化\"><a href=\"#快排的优化\" class=\"headerlink\" title=\"快排的优化\"></a>快排的优化</h2><p>快排最坏情况下的时间复杂度T(n)=n2，<br>eg：6,5,4,3,2,1；  且base取最后一个1。<br>要减小此概率的发生，base就要随机取一个</p>\n<p>添加伪代码：<br>思想：先随机取一个base，交换放到数组最后就行，然后正常调用Parition函数。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Random_partition(A, l, r)</span><br><span class=\"line\">    i=Random(l, r)</span><br><span class=\"line\">    swap(A[r], A[i])</span><br><span class=\"line\">    return Partition(A, l, r)</span><br></pre></td></tr></table></figure></p>\n"},{"date":"2018-10-30T10:26:00.000Z","status":"public","title":"排序","_content":"\n## 稳定性排序和非稳定性排序\n**稳定性排序**：能保证排序后2个相等的数前后位置顺序不变。eg：插入排序、冒泡排序、归并排序。\n\n**非稳定排序**： 相反。\n\n## 原址排序 插排，堆排，快排\n非： 归并排序\n\n## 一、归并排序\n#### 1.时间复杂度\n`O(n) = nlgn`\n\n#### 2.代码实现\n```C++\n```\n\n## 最大子数组问题\n\n\n## 二、堆排序\n#### 1.确定父结点，左孩子，右孩子\n\n\n#### 2.维护最大堆\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Algorithm/┼┼╨Є.md","raw":"---\ndate: 2018-10-30 10:26\nstatus: public\ntitle: 排序\ncategories: Algorithm\ntags: Algorithm\n---\n\n## 稳定性排序和非稳定性排序\n**稳定性排序**：能保证排序后2个相等的数前后位置顺序不变。eg：插入排序、冒泡排序、归并排序。\n\n**非稳定排序**： 相反。\n\n## 原址排序 插排，堆排，快排\n非： 归并排序\n\n## 一、归并排序\n#### 1.时间复杂度\n`O(n) = nlgn`\n\n#### 2.代码实现\n```C++\n```\n\n## 最大子数组问题\n\n\n## 二、堆排序\n#### 1.确定父结点，左孩子，右孩子\n\n\n#### 2.维护最大堆\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Algorithm/┼┼╨Є","published":1,"updated":"2018-12-18T03:55:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjptii4ck0003afpp91gc2cpz","content":"<h2 id=\"稳定性排序和非稳定性排序\"><a href=\"#稳定性排序和非稳定性排序\" class=\"headerlink\" title=\"稳定性排序和非稳定性排序\"></a>稳定性排序和非稳定性排序</h2><p><strong>稳定性排序</strong>：能保证排序后2个相等的数前后位置顺序不变。eg：插入排序、冒泡排序、归并排序。</p>\n<p><strong>非稳定排序</strong>： 相反。</p>\n<h2 id=\"原址排序-插排，堆排，快排\"><a href=\"#原址排序-插排，堆排，快排\" class=\"headerlink\" title=\"原址排序 插排，堆排，快排\"></a>原址排序 插排，堆排，快排</h2><p>非： 归并排序</p>\n<h2 id=\"一、归并排序\"><a href=\"#一、归并排序\" class=\"headerlink\" title=\"一、归并排序\"></a>一、归并排序</h2><h4 id=\"1-时间复杂度\"><a href=\"#1-时间复杂度\" class=\"headerlink\" title=\"1.时间复杂度\"></a>1.时间复杂度</h4><p><code>O(n) = nlgn</code></p>\n<h4 id=\"2-代码实现\"><a href=\"#2-代码实现\" class=\"headerlink\" title=\"2.代码实现\"></a>2.代码实现</h4><pre><code class=\"C++\">\n</code></pre>\n<h2 id=\"最大子数组问题\"><a href=\"#最大子数组问题\" class=\"headerlink\" title=\"最大子数组问题\"></a>最大子数组问题</h2><h2 id=\"二、堆排序\"><a href=\"#二、堆排序\" class=\"headerlink\" title=\"二、堆排序\"></a>二、堆排序</h2><h4 id=\"1-确定父结点，左孩子，右孩子\"><a href=\"#1-确定父结点，左孩子，右孩子\" class=\"headerlink\" title=\"1.确定父结点，左孩子，右孩子\"></a>1.确定父结点，左孩子，右孩子</h4><h4 id=\"2-维护最大堆\"><a href=\"#2-维护最大堆\" class=\"headerlink\" title=\"2.维护最大堆\"></a>2.维护最大堆</h4>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"稳定性排序和非稳定性排序\"><a href=\"#稳定性排序和非稳定性排序\" class=\"headerlink\" title=\"稳定性排序和非稳定性排序\"></a>稳定性排序和非稳定性排序</h2><p><strong>稳定性排序</strong>：能保证排序后2个相等的数前后位置顺序不变。eg：插入排序、冒泡排序、归并排序。</p>\n<p><strong>非稳定排序</strong>： 相反。</p>\n<h2 id=\"原址排序-插排，堆排，快排\"><a href=\"#原址排序-插排，堆排，快排\" class=\"headerlink\" title=\"原址排序 插排，堆排，快排\"></a>原址排序 插排，堆排，快排</h2><p>非： 归并排序</p>\n<h2 id=\"一、归并排序\"><a href=\"#一、归并排序\" class=\"headerlink\" title=\"一、归并排序\"></a>一、归并排序</h2><h4 id=\"1-时间复杂度\"><a href=\"#1-时间复杂度\" class=\"headerlink\" title=\"1.时间复杂度\"></a>1.时间复杂度</h4><p><code>O(n) = nlgn</code></p>\n<h4 id=\"2-代码实现\"><a href=\"#2-代码实现\" class=\"headerlink\" title=\"2.代码实现\"></a>2.代码实现</h4><pre><code class=\"C++\">\n</code></pre>\n<h2 id=\"最大子数组问题\"><a href=\"#最大子数组问题\" class=\"headerlink\" title=\"最大子数组问题\"></a>最大子数组问题</h2><h2 id=\"二、堆排序\"><a href=\"#二、堆排序\" class=\"headerlink\" title=\"二、堆排序\"></a>二、堆排序</h2><h4 id=\"1-确定父结点，左孩子，右孩子\"><a href=\"#1-确定父结点，左孩子，右孩子\" class=\"headerlink\" title=\"1.确定父结点，左孩子，右孩子\"></a>1.确定父结点，左孩子，右孩子</h4><h4 id=\"2-维护最大堆\"><a href=\"#2-维护最大堆\" class=\"headerlink\" title=\"2.维护最大堆\"></a>2.维护最大堆</h4>"},{"date":"2018-11-19T11:01:00.000Z","status":"public","title":"散列表","_content":"\n## 散列表\n> 参考 《算法导论》\n\n散列表(hash table)是从一个集合A到另一个集合B的映射(mapping)。\n\n**区别与直接寻址表（数组表）：**\n如果全域U很大，则要开辟的内存空间就要很大。但实际集合K相对U来说可能很小，所以开辟的空间就会浪费。\n\n#### 散列表冲突解决\n- 链接法\n- 开放寻址法\n- 字符串hash\n\n**1. 链接法**\n　　将所有关键字为同义词的结点链接在同一个链表中。若选定的散列表长度为m，则可将散列表定义为一个由m个头指针组成的指针数组T[0..m-1]。凡是散列地址为i的结点，均插入到以T[i]为头指针的单链表中。T中各分量的初值均应为空指针。在拉链法中，装填因子α可以大于1，但一般均取。\n\n![hash1](./image/hash1.png)\n\n**2. 开放寻址法**\n    冲突元素探测时从i=0开始，首先探查T[h'(k)]，然后依次探测T[h'(k)+1]，…，直到T[h'(k)+m-1]，此后又循环到T[0]，T[1]，…，直到探测到T[h'(k)-1]为止。装载因子α≤1。\n\n探查：\n- 线性探查\n- 二次探查\n- 双重探查\n\n缺点： 删除元素比较困难\n\n#### 散列函数（映射）\n- 除法散列\n- 乘法散列\n- 全域散列 \n\n#### 散列表应用\n1. 保存密码\n计算机的登陆密码，一般是一串字符。然而，为了安全起见，计算机不会直接保存该字符串，而是保存该字符串的hash值(使用**MD5**、**SHA**或者其他算法作为hash函数)。当用户下次登陆的时候，输入密码字符串。如果该密码字符串的hash值与保存的hash值一致，那么就认为用户输入了正确的密码。这样，就算黑客闯入了数据库中的密码记录，他能看到的也只是密码的hash值。上面所使用的hash函数有很好的单向性：很难从hash值去推测键值。\n</br>\n2. git内容变化\ngit中，文件内容为键值，并用SHA算法作为hash function，将文件内容对应为固定长度的字符串(hash值)。如果文件内容发生变化，那么所对应的字符串就会发生变化。git通过比较较短的hash值，就可以知道文件内容是否发生变动。\n","source":"_posts/Algorithm/╔в┴╨▒э.md","raw":"---\ndate: 2018-11-19 11:01\nstatus: public\ntitle: 散列表\ncategories: Algorithm\ntags: Algorithm\n---\n\n## 散列表\n> 参考 《算法导论》\n\n散列表(hash table)是从一个集合A到另一个集合B的映射(mapping)。\n\n**区别与直接寻址表（数组表）：**\n如果全域U很大，则要开辟的内存空间就要很大。但实际集合K相对U来说可能很小，所以开辟的空间就会浪费。\n\n#### 散列表冲突解决\n- 链接法\n- 开放寻址法\n- 字符串hash\n\n**1. 链接法**\n　　将所有关键字为同义词的结点链接在同一个链表中。若选定的散列表长度为m，则可将散列表定义为一个由m个头指针组成的指针数组T[0..m-1]。凡是散列地址为i的结点，均插入到以T[i]为头指针的单链表中。T中各分量的初值均应为空指针。在拉链法中，装填因子α可以大于1，但一般均取。\n\n![hash1](./image/hash1.png)\n\n**2. 开放寻址法**\n    冲突元素探测时从i=0开始，首先探查T[h'(k)]，然后依次探测T[h'(k)+1]，…，直到T[h'(k)+m-1]，此后又循环到T[0]，T[1]，…，直到探测到T[h'(k)-1]为止。装载因子α≤1。\n\n探查：\n- 线性探查\n- 二次探查\n- 双重探查\n\n缺点： 删除元素比较困难\n\n#### 散列函数（映射）\n- 除法散列\n- 乘法散列\n- 全域散列 \n\n#### 散列表应用\n1. 保存密码\n计算机的登陆密码，一般是一串字符。然而，为了安全起见，计算机不会直接保存该字符串，而是保存该字符串的hash值(使用**MD5**、**SHA**或者其他算法作为hash函数)。当用户下次登陆的时候，输入密码字符串。如果该密码字符串的hash值与保存的hash值一致，那么就认为用户输入了正确的密码。这样，就算黑客闯入了数据库中的密码记录，他能看到的也只是密码的hash值。上面所使用的hash函数有很好的单向性：很难从hash值去推测键值。\n</br>\n2. git内容变化\ngit中，文件内容为键值，并用SHA算法作为hash function，将文件内容对应为固定长度的字符串(hash值)。如果文件内容发生变化，那么所对应的字符串就会发生变化。git通过比较较短的hash值，就可以知道文件内容是否发生变动。\n","slug":"Algorithm/╔в┴╨▒э","published":1,"updated":"2018-12-18T03:55:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjptii4d90006afpppa3l38w0","content":"<h2 id=\"散列表\"><a href=\"#散列表\" class=\"headerlink\" title=\"散列表\"></a>散列表</h2><blockquote>\n<p>参考 《算法导论》</p>\n</blockquote>\n<p>散列表(hash table)是从一个集合A到另一个集合B的映射(mapping)。</p>\n<p><strong>区别与直接寻址表（数组表）：</strong><br>如果全域U很大，则要开辟的内存空间就要很大。但实际集合K相对U来说可能很小，所以开辟的空间就会浪费。</p>\n<h4 id=\"散列表冲突解决\"><a href=\"#散列表冲突解决\" class=\"headerlink\" title=\"散列表冲突解决\"></a>散列表冲突解决</h4><ul>\n<li>链接法</li>\n<li>开放寻址法</li>\n<li>字符串hash</li>\n</ul>\n<p><strong>1. 链接法</strong><br>　　将所有关键字为同义词的结点链接在同一个链表中。若选定的散列表长度为m，则可将散列表定义为一个由m个头指针组成的指针数组T[0..m-1]。凡是散列地址为i的结点，均插入到以T[i]为头指针的单链表中。T中各分量的初值均应为空指针。在拉链法中，装填因子α可以大于1，但一般均取。</p>\n<p><img src=\"./image/hash1.png\" alt=\"hash1\"></p>\n<p><strong>2. 开放寻址法</strong><br>    冲突元素探测时从i=0开始，首先探查T[h’(k)]，然后依次探测T[h’(k)+1]，…，直到T[h’(k)+m-1]，此后又循环到T[0]，T[1]，…，直到探测到T[h’(k)-1]为止。装载因子α≤1。</p>\n<p>探查：</p>\n<ul>\n<li>线性探查</li>\n<li>二次探查</li>\n<li>双重探查</li>\n</ul>\n<p>缺点： 删除元素比较困难</p>\n<h4 id=\"散列函数（映射）\"><a href=\"#散列函数（映射）\" class=\"headerlink\" title=\"散列函数（映射）\"></a>散列函数（映射）</h4><ul>\n<li>除法散列</li>\n<li>乘法散列</li>\n<li>全域散列 </li>\n</ul>\n<h4 id=\"散列表应用\"><a href=\"#散列表应用\" class=\"headerlink\" title=\"散列表应用\"></a>散列表应用</h4><ol>\n<li>保存密码<br>计算机的登陆密码，一般是一串字符。然而，为了安全起见，计算机不会直接保存该字符串，而是保存该字符串的hash值(使用<strong>MD5</strong>、<strong>SHA</strong>或者其他算法作为hash函数)。当用户下次登陆的时候，输入密码字符串。如果该密码字符串的hash值与保存的hash值一致，那么就认为用户输入了正确的密码。这样，就算黑客闯入了数据库中的密码记录，他能看到的也只是密码的hash值。上面所使用的hash函数有很好的单向性：很难从hash值去推测键值。<br><br></li>\n<li>git内容变化<br>git中，文件内容为键值，并用SHA算法作为hash function，将文件内容对应为固定长度的字符串(hash值)。如果文件内容发生变化，那么所对应的字符串就会发生变化。git通过比较较短的hash值，就可以知道文件内容是否发生变动。</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"散列表\"><a href=\"#散列表\" class=\"headerlink\" title=\"散列表\"></a>散列表</h2><blockquote>\n<p>参考 《算法导论》</p>\n</blockquote>\n<p>散列表(hash table)是从一个集合A到另一个集合B的映射(mapping)。</p>\n<p><strong>区别与直接寻址表（数组表）：</strong><br>如果全域U很大，则要开辟的内存空间就要很大。但实际集合K相对U来说可能很小，所以开辟的空间就会浪费。</p>\n<h4 id=\"散列表冲突解决\"><a href=\"#散列表冲突解决\" class=\"headerlink\" title=\"散列表冲突解决\"></a>散列表冲突解决</h4><ul>\n<li>链接法</li>\n<li>开放寻址法</li>\n<li>字符串hash</li>\n</ul>\n<p><strong>1. 链接法</strong><br>　　将所有关键字为同义词的结点链接在同一个链表中。若选定的散列表长度为m，则可将散列表定义为一个由m个头指针组成的指针数组T[0..m-1]。凡是散列地址为i的结点，均插入到以T[i]为头指针的单链表中。T中各分量的初值均应为空指针。在拉链法中，装填因子α可以大于1，但一般均取。</p>\n<p><img src=\"./image/hash1.png\" alt=\"hash1\"></p>\n<p><strong>2. 开放寻址法</strong><br>    冲突元素探测时从i=0开始，首先探查T[h’(k)]，然后依次探测T[h’(k)+1]，…，直到T[h’(k)+m-1]，此后又循环到T[0]，T[1]，…，直到探测到T[h’(k)-1]为止。装载因子α≤1。</p>\n<p>探查：</p>\n<ul>\n<li>线性探查</li>\n<li>二次探查</li>\n<li>双重探查</li>\n</ul>\n<p>缺点： 删除元素比较困难</p>\n<h4 id=\"散列函数（映射）\"><a href=\"#散列函数（映射）\" class=\"headerlink\" title=\"散列函数（映射）\"></a>散列函数（映射）</h4><ul>\n<li>除法散列</li>\n<li>乘法散列</li>\n<li>全域散列 </li>\n</ul>\n<h4 id=\"散列表应用\"><a href=\"#散列表应用\" class=\"headerlink\" title=\"散列表应用\"></a>散列表应用</h4><ol>\n<li>保存密码<br>计算机的登陆密码，一般是一串字符。然而，为了安全起见，计算机不会直接保存该字符串，而是保存该字符串的hash值(使用<strong>MD5</strong>、<strong>SHA</strong>或者其他算法作为hash函数)。当用户下次登陆的时候，输入密码字符串。如果该密码字符串的hash值与保存的hash值一致，那么就认为用户输入了正确的密码。这样，就算黑客闯入了数据库中的密码记录，他能看到的也只是密码的hash值。上面所使用的hash函数有很好的单向性：很难从hash值去推测键值。<br><br></li>\n<li>git内容变化<br>git中，文件内容为键值，并用SHA算法作为hash function，将文件内容对应为固定长度的字符串(hash值)。如果文件内容发生变化，那么所对应的字符串就会发生变化。git通过比较较短的hash值，就可以知道文件内容是否发生变动。</li>\n</ol>\n"},{"author":"xblin","date":"2018-10-30T19:47:00.000Z","status":"public","title":"堆排序","_content":"\n## 堆排序\n\n>参考书籍： 《算法导论》\n\n#### 堆排序特点\n- 原址排序\n- 不稳定排序\n- T(n)=nlgn\n\n#### 堆排序缺点\n1. 最大的也是唯一的缺点就是——堆的维护问题，实际场景中的数据是频繁发生变动的，而对于待排序序列的每次更新（增，删，改），我们都要重新做一遍堆的维护，以保证其特性，这在大多数情况下都是没有必要的\n2. 每次移出堆顶最大元素后，都需要从顶部维护最大堆性质导致了过多的数据交换操作。\n3. 插入一个元素后（加到堆最后），又要重新进行整个堆算法。\n#### 堆排序的总过程：\n一.确定父结点，左右孩子；\n二.维护最大堆 O(n)=lgn;\n三.建立最大堆\n四.堆排算法 T(n)=nlgn\n\n----\n#### 1. 完全二叉树 <--> 数组\n![](./image/heap1.jpg)\n#### 2.确定父结点，左孩子，右孩子\n```C++\n#define Parent(i) ((i-1)/2)    //父结点\n#define Left(i)   (i*2+1)      //左孩子\n#define Right(i)  (i*2+2)      //右孩子\n```\n#### 3.维护最大堆\n最大堆： 所有结点满足 父结点的值要大于左右孩子的值；\n         A[Parent] > A[i]\n![](./image/heap2.jpg)\n**C++代码：**\n```C++\n/***************维护最大堆函数*****************/\nvoid Max_Heapify(int A[], int i, int Heap_size){\n\tint left = Left(i);      //左孩子\n\tint right = Right(i);    //右孩子\n\tint largest_num = i;     //存放最大值的下标\n\n\tif (left < Heap_size && A[left] > A[i]){\n\t\tlargest_num = left;\n\t}\n\tif (right < Heap_size && A[right] > A[largest_num]){      //注意：这里一定要是largerst\n\t\tlargest_num = right;\n\t}\n\tif (largest_num != i){\n\t\tSwap(A[i], A[largest_num]); //交换两个值\n\t\tMax_Heapify(A, largest_num, Heap_size);   //递归调用，确保调换后保证最大堆的性质， 因为建堆是倒序的\n\t}\n}\n```\n\n#### 4.建立最大堆\n- 从下往上以后Max_Heapify()函数 把A转化成最大堆\n- 从有左右孩子的结点开始\n![](./image/heap3.jpg)\n**C++代码：**\n```C++\n/***************建立最大堆函数*************************/\nvoid Build_MaxHeap(int A[], int Heap_size){\n\n\tfor (int i = (Heap_size-2)/2; i >= 0; i--){    //从有孩子的结点开始建堆        \n\t\tMax_Heapify(A, i, Heap_size);              //从下往上维护最大堆\n\t}\n}\n```\n\n#### 5.堆排序算法\n\n**原理：**\n最大元素A[0] 与 A[Heap_size] 交换后，断开A[Heap_size]，A.length-1; 然后维护最大堆，如此循环下去。\n![](./image/heap4.jpg)\n**C++代码：**\n```C++\n/***************堆排序算法**********************/\nvoid Heap_sort(int A[], int Heap_size){\n\n\tBuild_MaxHeap(A, Heap_size);\n\n\tfor (int i = Heap_size-1; i>0; i--){\n\t\tSwap(A[i], A[0]);\n\t\tMax_Heapify(A, 0, i);           //A.lenth -- 交换完A[0]最大值后，要断开\n\t}\n}\n```\n----\n</br>\n#### 最后附上C++整体代码\n```C++\n/* filename: Heap_sort.cpp\n *\n * Author:   xblin\n */\n#include <iostream>\nusing namespace std;\n\n#define Parent(i) ((i-1)/2)    //i的父结点\n#define Left(i)   (i*2+1)      //i的左孩子\n#define Right(i)  (i*2+2)      //i的右孩子\n\n/*通过引用来交换变量值函数*/\nvoid Swap(int &a, int &b){\n\tint temp = a;\n\ta = b;\n\tb = temp;\n}\n/***************维护最大堆函数*****************/\nvoid Max_Heapify(int A[], int i, int Heap_size){\n\tint left = Left(i);      //左孩子\n\tint right = Right(i);    //右孩子\n\tint largest_num = i;     //存放最大值的下标\n\t\n\tif (left < Heap_size && A[left] > A[i]){\n\t\tlargest_num = left;\n\n\t}\n\tif (right < Heap_size && A[right] > A[largest_num]){      //注意：这里一定要是largerst\n\t\tlargest_num = right;\n\t}\n\tif (largest_num != i){\n\t\tSwap(A[i], A[largest_num]);\n\t\tMax_Heapify(A, largest_num, Heap_size);   //递归调用，确保调换后保证最大堆的性质， 因为建堆是倒序的\n\t}\n}\n/***************建立最大堆函数*************************/\nvoid Build_MaxHeap(int A[], int Heap_size){\n\n\tfor (int i = (Heap_size-2)/2; i >= 0; i--){    //从有孩子的结点开始建堆        \n\t\tMax_Heapify(A, i, Heap_size);              //从下往上维护最大堆\n\t}\n}\n/***************堆排序算法**********************/\nvoid Heap_sort(int A[], int Heap_size){\n\n\tBuild_MaxHeap(A, Heap_size);\n\n\tfor (int i = Heap_size-1; i>0; i--){\n\t\tSwap(A[i], A[0]);\n\t\tMax_Heapify(A, 0, i);           //A.lenth -- 交换完A[0]最大值后，要断开\n\t}\n}\nint main(int argc, char  **argv){\n\t\n\tint aa[] = {4,1,3,2,16,9,10,14,8,7};\n\tint Heap_size = sizeof(aa) / sizeof(aa[0]);  //C++算数组长度，也可用sizeof(aa)/sizeof(int);\n\t\n\tHeap_sort(aa, Heap_size);  //堆排序算法\n\n\tfor (int i = 0; i < Heap_size;i++)\n\t\tcout << aa[i] << endl;            //输出数组\n\n\treturn 0;\n}\n```\n\n----\n## 最大优先级队列\n#### 实质是对一个**最大堆**的查找，插入，删除操作\n\n- Insert(S, x): 把元素x插入最大堆S中。\n- Maximum(S): 返回S中具有最大关键字的元素\n- Increase-Key(S,x,k): 将元素x的值增加到k后维护最大堆\n\n1.Increase-Key(S,x,k)：该增加后的值不断与父结点比较。\n\n2.插入元素到最大堆：先把元素放到堆尾，然后调用Increase-Key(S,x,k)\n","source":"_posts/Algorithm/╢╤┼┼╨Є.md","raw":"---\nauthor: xblin\ndate: 2018-10-30 19:47\nstatus: public\ntitle: 堆排序\ncategories: Algorithm\ntags: Algorithm\n---\n\n## 堆排序\n\n>参考书籍： 《算法导论》\n\n#### 堆排序特点\n- 原址排序\n- 不稳定排序\n- T(n)=nlgn\n\n#### 堆排序缺点\n1. 最大的也是唯一的缺点就是——堆的维护问题，实际场景中的数据是频繁发生变动的，而对于待排序序列的每次更新（增，删，改），我们都要重新做一遍堆的维护，以保证其特性，这在大多数情况下都是没有必要的\n2. 每次移出堆顶最大元素后，都需要从顶部维护最大堆性质导致了过多的数据交换操作。\n3. 插入一个元素后（加到堆最后），又要重新进行整个堆算法。\n#### 堆排序的总过程：\n一.确定父结点，左右孩子；\n二.维护最大堆 O(n)=lgn;\n三.建立最大堆\n四.堆排算法 T(n)=nlgn\n\n----\n#### 1. 完全二叉树 <--> 数组\n![](./image/heap1.jpg)\n#### 2.确定父结点，左孩子，右孩子\n```C++\n#define Parent(i) ((i-1)/2)    //父结点\n#define Left(i)   (i*2+1)      //左孩子\n#define Right(i)  (i*2+2)      //右孩子\n```\n#### 3.维护最大堆\n最大堆： 所有结点满足 父结点的值要大于左右孩子的值；\n         A[Parent] > A[i]\n![](./image/heap2.jpg)\n**C++代码：**\n```C++\n/***************维护最大堆函数*****************/\nvoid Max_Heapify(int A[], int i, int Heap_size){\n\tint left = Left(i);      //左孩子\n\tint right = Right(i);    //右孩子\n\tint largest_num = i;     //存放最大值的下标\n\n\tif (left < Heap_size && A[left] > A[i]){\n\t\tlargest_num = left;\n\t}\n\tif (right < Heap_size && A[right] > A[largest_num]){      //注意：这里一定要是largerst\n\t\tlargest_num = right;\n\t}\n\tif (largest_num != i){\n\t\tSwap(A[i], A[largest_num]); //交换两个值\n\t\tMax_Heapify(A, largest_num, Heap_size);   //递归调用，确保调换后保证最大堆的性质， 因为建堆是倒序的\n\t}\n}\n```\n\n#### 4.建立最大堆\n- 从下往上以后Max_Heapify()函数 把A转化成最大堆\n- 从有左右孩子的结点开始\n![](./image/heap3.jpg)\n**C++代码：**\n```C++\n/***************建立最大堆函数*************************/\nvoid Build_MaxHeap(int A[], int Heap_size){\n\n\tfor (int i = (Heap_size-2)/2; i >= 0; i--){    //从有孩子的结点开始建堆        \n\t\tMax_Heapify(A, i, Heap_size);              //从下往上维护最大堆\n\t}\n}\n```\n\n#### 5.堆排序算法\n\n**原理：**\n最大元素A[0] 与 A[Heap_size] 交换后，断开A[Heap_size]，A.length-1; 然后维护最大堆，如此循环下去。\n![](./image/heap4.jpg)\n**C++代码：**\n```C++\n/***************堆排序算法**********************/\nvoid Heap_sort(int A[], int Heap_size){\n\n\tBuild_MaxHeap(A, Heap_size);\n\n\tfor (int i = Heap_size-1; i>0; i--){\n\t\tSwap(A[i], A[0]);\n\t\tMax_Heapify(A, 0, i);           //A.lenth -- 交换完A[0]最大值后，要断开\n\t}\n}\n```\n----\n</br>\n#### 最后附上C++整体代码\n```C++\n/* filename: Heap_sort.cpp\n *\n * Author:   xblin\n */\n#include <iostream>\nusing namespace std;\n\n#define Parent(i) ((i-1)/2)    //i的父结点\n#define Left(i)   (i*2+1)      //i的左孩子\n#define Right(i)  (i*2+2)      //i的右孩子\n\n/*通过引用来交换变量值函数*/\nvoid Swap(int &a, int &b){\n\tint temp = a;\n\ta = b;\n\tb = temp;\n}\n/***************维护最大堆函数*****************/\nvoid Max_Heapify(int A[], int i, int Heap_size){\n\tint left = Left(i);      //左孩子\n\tint right = Right(i);    //右孩子\n\tint largest_num = i;     //存放最大值的下标\n\t\n\tif (left < Heap_size && A[left] > A[i]){\n\t\tlargest_num = left;\n\n\t}\n\tif (right < Heap_size && A[right] > A[largest_num]){      //注意：这里一定要是largerst\n\t\tlargest_num = right;\n\t}\n\tif (largest_num != i){\n\t\tSwap(A[i], A[largest_num]);\n\t\tMax_Heapify(A, largest_num, Heap_size);   //递归调用，确保调换后保证最大堆的性质， 因为建堆是倒序的\n\t}\n}\n/***************建立最大堆函数*************************/\nvoid Build_MaxHeap(int A[], int Heap_size){\n\n\tfor (int i = (Heap_size-2)/2; i >= 0; i--){    //从有孩子的结点开始建堆        \n\t\tMax_Heapify(A, i, Heap_size);              //从下往上维护最大堆\n\t}\n}\n/***************堆排序算法**********************/\nvoid Heap_sort(int A[], int Heap_size){\n\n\tBuild_MaxHeap(A, Heap_size);\n\n\tfor (int i = Heap_size-1; i>0; i--){\n\t\tSwap(A[i], A[0]);\n\t\tMax_Heapify(A, 0, i);           //A.lenth -- 交换完A[0]最大值后，要断开\n\t}\n}\nint main(int argc, char  **argv){\n\t\n\tint aa[] = {4,1,3,2,16,9,10,14,8,7};\n\tint Heap_size = sizeof(aa) / sizeof(aa[0]);  //C++算数组长度，也可用sizeof(aa)/sizeof(int);\n\t\n\tHeap_sort(aa, Heap_size);  //堆排序算法\n\n\tfor (int i = 0; i < Heap_size;i++)\n\t\tcout << aa[i] << endl;            //输出数组\n\n\treturn 0;\n}\n```\n\n----\n## 最大优先级队列\n#### 实质是对一个**最大堆**的查找，插入，删除操作\n\n- Insert(S, x): 把元素x插入最大堆S中。\n- Maximum(S): 返回S中具有最大关键字的元素\n- Increase-Key(S,x,k): 将元素x的值增加到k后维护最大堆\n\n1.Increase-Key(S,x,k)：该增加后的值不断与父结点比较。\n\n2.插入元素到最大堆：先把元素放到堆尾，然后调用Increase-Key(S,x,k)\n","slug":"Algorithm/╢╤┼┼╨Є","published":1,"updated":"2018-12-18T03:55:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjptii4dq0007afpp2z3k73el","content":"<h2 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h2><blockquote>\n<p>参考书籍： 《算法导论》</p>\n</blockquote>\n<h4 id=\"堆排序特点\"><a href=\"#堆排序特点\" class=\"headerlink\" title=\"堆排序特点\"></a>堆排序特点</h4><ul>\n<li>原址排序</li>\n<li>不稳定排序</li>\n<li>T(n)=nlgn</li>\n</ul>\n<h4 id=\"堆排序缺点\"><a href=\"#堆排序缺点\" class=\"headerlink\" title=\"堆排序缺点\"></a>堆排序缺点</h4><ol>\n<li>最大的也是唯一的缺点就是——堆的维护问题，实际场景中的数据是频繁发生变动的，而对于待排序序列的每次更新（增，删，改），我们都要重新做一遍堆的维护，以保证其特性，这在大多数情况下都是没有必要的</li>\n<li>每次移出堆顶最大元素后，都需要从顶部维护最大堆性质导致了过多的数据交换操作。</li>\n<li>插入一个元素后（加到堆最后），又要重新进行整个堆算法。<h4 id=\"堆排序的总过程：\"><a href=\"#堆排序的总过程：\" class=\"headerlink\" title=\"堆排序的总过程：\"></a>堆排序的总过程：</h4>一.确定父结点，左右孩子；<br>二.维护最大堆 O(n)=lgn;<br>三.建立最大堆<br>四.堆排算法 T(n)=nlgn</li>\n</ol>\n<hr>\n<h4 id=\"1-完全二叉树-数组\"><a href=\"#1-完全二叉树-数组\" class=\"headerlink\" title=\"1. 完全二叉树  数组\"></a>1. 完全二叉树 <--> 数组</--></h4><p><img src=\"./image/heap1.jpg\" alt=\"\"></p>\n<h4 id=\"2-确定父结点，左孩子，右孩子\"><a href=\"#2-确定父结点，左孩子，右孩子\" class=\"headerlink\" title=\"2.确定父结点，左孩子，右孩子\"></a>2.确定父结点，左孩子，右孩子</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Parent(i) ((i-1)/2)    <span class=\"comment\">//父结点</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Left(i)   (i*2+1)      <span class=\"comment\">//左孩子</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Right(i)  (i*2+2)      <span class=\"comment\">//右孩子</span></span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-维护最大堆\"><a href=\"#3-维护最大堆\" class=\"headerlink\" title=\"3.维护最大堆\"></a>3.维护最大堆</h4><p>最大堆： 所有结点满足 父结点的值要大于左右孩子的值；<br>         A[Parent] &gt; A[i]<br><img src=\"./image/heap2.jpg\" alt=\"\"><br><strong>C++代码：</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/***************维护最大堆函数*****************/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Max_Heapify</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> Heap_size)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> left = Left(i);      <span class=\"comment\">//左孩子</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> right = Right(i);    <span class=\"comment\">//右孩子</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> largest_num = i;     <span class=\"comment\">//存放最大值的下标</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (left &lt; Heap_size &amp;&amp; A[left] &gt; A[i])&#123;</span><br><span class=\"line\">\t\tlargest_num = left;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (right &lt; Heap_size &amp;&amp; A[right] &gt; A[largest_num])&#123;      <span class=\"comment\">//注意：这里一定要是largerst</span></span><br><span class=\"line\">\t\tlargest_num = right;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (largest_num != i)&#123;</span><br><span class=\"line\">\t\tSwap(A[i], A[largest_num]); <span class=\"comment\">//交换两个值</span></span><br><span class=\"line\">\t\tMax_Heapify(A, largest_num, Heap_size);   <span class=\"comment\">//递归调用，确保调换后保证最大堆的性质， 因为建堆是倒序的</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-建立最大堆\"><a href=\"#4-建立最大堆\" class=\"headerlink\" title=\"4.建立最大堆\"></a>4.建立最大堆</h4><ul>\n<li>从下往上以后Max_Heapify()函数 把A转化成最大堆</li>\n<li>从有左右孩子的结点开始<br><img src=\"./image/heap3.jpg\" alt=\"\"><br><strong>C++代码：</strong><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/***************建立最大堆函数*************************/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Build_MaxHeap</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> Heap_size)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = (Heap_size<span class=\"number\">-2</span>)/<span class=\"number\">2</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;    <span class=\"comment\">//从有孩子的结点开始建堆        </span></span><br><span class=\"line\">\t\tMax_Heapify(A, i, Heap_size);              <span class=\"comment\">//从下往上维护最大堆</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"5-堆排序算法\"><a href=\"#5-堆排序算法\" class=\"headerlink\" title=\"5.堆排序算法\"></a>5.堆排序算法</h4><p><strong>原理：</strong><br>最大元素A[0] 与 A[Heap_size] 交换后，断开A[Heap_size]，A.length-1; 然后维护最大堆，如此循环下去。<br><img src=\"./image/heap4.jpg\" alt=\"\"><br><strong>C++代码：</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/***************堆排序算法**********************/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Heap_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> Heap_size)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tBuild_MaxHeap(A, Heap_size);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = Heap_size<span class=\"number\">-1</span>; i&gt;<span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">\t\tSwap(A[i], A[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\tMax_Heapify(A, <span class=\"number\">0</span>, i);           <span class=\"comment\">//A.lenth -- 交换完A[0]最大值后，要断开</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p><br></p>\n<h4 id=\"最后附上C-整体代码\"><a href=\"#最后附上C-整体代码\" class=\"headerlink\" title=\"最后附上C++整体代码\"></a>最后附上C++整体代码</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* filename: Heap_sort.cpp</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author:   xblin</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Parent(i) ((i-1)/2)    <span class=\"comment\">//i的父结点</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Left(i)   (i*2+1)      <span class=\"comment\">//i的左孩子</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Right(i)  (i*2+2)      <span class=\"comment\">//i的右孩子</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*通过引用来交换变量值函数*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Swap</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a, <span class=\"keyword\">int</span> &amp;b)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> temp = a;</span><br><span class=\"line\">\ta = b;</span><br><span class=\"line\">\tb = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/***************维护最大堆函数*****************/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Max_Heapify</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> Heap_size)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> left = Left(i);      <span class=\"comment\">//左孩子</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> right = Right(i);    <span class=\"comment\">//右孩子</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> largest_num = i;     <span class=\"comment\">//存放最大值的下标</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (left &lt; Heap_size &amp;&amp; A[left] &gt; A[i])&#123;</span><br><span class=\"line\">\t\tlargest_num = left;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (right &lt; Heap_size &amp;&amp; A[right] &gt; A[largest_num])&#123;      <span class=\"comment\">//注意：这里一定要是largerst</span></span><br><span class=\"line\">\t\tlargest_num = right;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (largest_num != i)&#123;</span><br><span class=\"line\">\t\tSwap(A[i], A[largest_num]);</span><br><span class=\"line\">\t\tMax_Heapify(A, largest_num, Heap_size);   <span class=\"comment\">//递归调用，确保调换后保证最大堆的性质， 因为建堆是倒序的</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/***************建立最大堆函数*************************/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Build_MaxHeap</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> Heap_size)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = (Heap_size<span class=\"number\">-2</span>)/<span class=\"number\">2</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;    <span class=\"comment\">//从有孩子的结点开始建堆        </span></span><br><span class=\"line\">\t\tMax_Heapify(A, i, Heap_size);              <span class=\"comment\">//从下往上维护最大堆</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/***************堆排序算法**********************/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Heap_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> Heap_size)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tBuild_MaxHeap(A, Heap_size);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = Heap_size<span class=\"number\">-1</span>; i&gt;<span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">\t\tSwap(A[i], A[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\tMax_Heapify(A, <span class=\"number\">0</span>, i);           <span class=\"comment\">//A.lenth -- 交换完A[0]最大值后，要断开</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>  **argv)</span></span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> aa[] = &#123;<span class=\"number\">4</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">16</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>,<span class=\"number\">14</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> Heap_size = <span class=\"keyword\">sizeof</span>(aa) / <span class=\"keyword\">sizeof</span>(aa[<span class=\"number\">0</span>]);  <span class=\"comment\">//C++算数组长度，也可用sizeof(aa)/sizeof(int);</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tHeap_sort(aa, Heap_size);  <span class=\"comment\">//堆排序算法</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; Heap_size;i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; aa[i] &lt;&lt; <span class=\"built_in\">endl</span>;            <span class=\"comment\">//输出数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"最大优先级队列\"><a href=\"#最大优先级队列\" class=\"headerlink\" title=\"最大优先级队列\"></a>最大优先级队列</h2><h4 id=\"实质是对一个最大堆的查找，插入，删除操作\"><a href=\"#实质是对一个最大堆的查找，插入，删除操作\" class=\"headerlink\" title=\"实质是对一个最大堆的查找，插入，删除操作\"></a>实质是对一个<strong>最大堆</strong>的查找，插入，删除操作</h4><ul>\n<li>Insert(S, x): 把元素x插入最大堆S中。</li>\n<li>Maximum(S): 返回S中具有最大关键字的元素</li>\n<li>Increase-Key(S,x,k): 将元素x的值增加到k后维护最大堆</li>\n</ul>\n<p>1.Increase-Key(S,x,k)：该增加后的值不断与父结点比较。</p>\n<p>2.插入元素到最大堆：先把元素放到堆尾，然后调用Increase-Key(S,x,k)</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h2><blockquote>\n<p>参考书籍： 《算法导论》</p>\n</blockquote>\n<h4 id=\"堆排序特点\"><a href=\"#堆排序特点\" class=\"headerlink\" title=\"堆排序特点\"></a>堆排序特点</h4><ul>\n<li>原址排序</li>\n<li>不稳定排序</li>\n<li>T(n)=nlgn</li>\n</ul>\n<h4 id=\"堆排序缺点\"><a href=\"#堆排序缺点\" class=\"headerlink\" title=\"堆排序缺点\"></a>堆排序缺点</h4><ol>\n<li>最大的也是唯一的缺点就是——堆的维护问题，实际场景中的数据是频繁发生变动的，而对于待排序序列的每次更新（增，删，改），我们都要重新做一遍堆的维护，以保证其特性，这在大多数情况下都是没有必要的</li>\n<li>每次移出堆顶最大元素后，都需要从顶部维护最大堆性质导致了过多的数据交换操作。</li>\n<li>插入一个元素后（加到堆最后），又要重新进行整个堆算法。<h4 id=\"堆排序的总过程：\"><a href=\"#堆排序的总过程：\" class=\"headerlink\" title=\"堆排序的总过程：\"></a>堆排序的总过程：</h4>一.确定父结点，左右孩子；<br>二.维护最大堆 O(n)=lgn;<br>三.建立最大堆<br>四.堆排算法 T(n)=nlgn</li>\n</ol>\n<hr>\n<h4 id=\"1-完全二叉树-数组\"><a href=\"#1-完全二叉树-数组\" class=\"headerlink\" title=\"1. 完全二叉树  数组\"></a>1. 完全二叉树 <--> 数组</--></h4><p><img src=\"./image/heap1.jpg\" alt=\"\"></p>\n<h4 id=\"2-确定父结点，左孩子，右孩子\"><a href=\"#2-确定父结点，左孩子，右孩子\" class=\"headerlink\" title=\"2.确定父结点，左孩子，右孩子\"></a>2.确定父结点，左孩子，右孩子</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Parent(i) ((i-1)/2)    <span class=\"comment\">//父结点</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Left(i)   (i*2+1)      <span class=\"comment\">//左孩子</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Right(i)  (i*2+2)      <span class=\"comment\">//右孩子</span></span></span><br></pre></td></tr></table></figure>\n<h4 id=\"3-维护最大堆\"><a href=\"#3-维护最大堆\" class=\"headerlink\" title=\"3.维护最大堆\"></a>3.维护最大堆</h4><p>最大堆： 所有结点满足 父结点的值要大于左右孩子的值；<br>         A[Parent] &gt; A[i]<br><img src=\"./image/heap2.jpg\" alt=\"\"><br><strong>C++代码：</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/***************维护最大堆函数*****************/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Max_Heapify</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> Heap_size)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> left = Left(i);      <span class=\"comment\">//左孩子</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> right = Right(i);    <span class=\"comment\">//右孩子</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> largest_num = i;     <span class=\"comment\">//存放最大值的下标</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (left &lt; Heap_size &amp;&amp; A[left] &gt; A[i])&#123;</span><br><span class=\"line\">\t\tlargest_num = left;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (right &lt; Heap_size &amp;&amp; A[right] &gt; A[largest_num])&#123;      <span class=\"comment\">//注意：这里一定要是largerst</span></span><br><span class=\"line\">\t\tlargest_num = right;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (largest_num != i)&#123;</span><br><span class=\"line\">\t\tSwap(A[i], A[largest_num]); <span class=\"comment\">//交换两个值</span></span><br><span class=\"line\">\t\tMax_Heapify(A, largest_num, Heap_size);   <span class=\"comment\">//递归调用，确保调换后保证最大堆的性质， 因为建堆是倒序的</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"4-建立最大堆\"><a href=\"#4-建立最大堆\" class=\"headerlink\" title=\"4.建立最大堆\"></a>4.建立最大堆</h4><ul>\n<li>从下往上以后Max_Heapify()函数 把A转化成最大堆</li>\n<li>从有左右孩子的结点开始<br><img src=\"./image/heap3.jpg\" alt=\"\"><br><strong>C++代码：</strong><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/***************建立最大堆函数*************************/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Build_MaxHeap</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> Heap_size)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = (Heap_size<span class=\"number\">-2</span>)/<span class=\"number\">2</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;    <span class=\"comment\">//从有孩子的结点开始建堆        </span></span><br><span class=\"line\">\t\tMax_Heapify(A, i, Heap_size);              <span class=\"comment\">//从下往上维护最大堆</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"5-堆排序算法\"><a href=\"#5-堆排序算法\" class=\"headerlink\" title=\"5.堆排序算法\"></a>5.堆排序算法</h4><p><strong>原理：</strong><br>最大元素A[0] 与 A[Heap_size] 交换后，断开A[Heap_size]，A.length-1; 然后维护最大堆，如此循环下去。<br><img src=\"./image/heap4.jpg\" alt=\"\"><br><strong>C++代码：</strong><br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/***************堆排序算法**********************/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Heap_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> Heap_size)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tBuild_MaxHeap(A, Heap_size);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = Heap_size<span class=\"number\">-1</span>; i&gt;<span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">\t\tSwap(A[i], A[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\tMax_Heapify(A, <span class=\"number\">0</span>, i);           <span class=\"comment\">//A.lenth -- 交换完A[0]最大值后，要断开</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<hr>\n<p><br></p>\n<h4 id=\"最后附上C-整体代码\"><a href=\"#最后附上C-整体代码\" class=\"headerlink\" title=\"最后附上C++整体代码\"></a>最后附上C++整体代码</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* filename: Heap_sort.cpp</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author:   xblin</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Parent(i) ((i-1)/2)    <span class=\"comment\">//i的父结点</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Left(i)   (i*2+1)      <span class=\"comment\">//i的左孩子</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> Right(i)  (i*2+2)      <span class=\"comment\">//i的右孩子</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*通过引用来交换变量值函数*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Swap</span><span class=\"params\">(<span class=\"keyword\">int</span> &amp;a, <span class=\"keyword\">int</span> &amp;b)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> temp = a;</span><br><span class=\"line\">\ta = b;</span><br><span class=\"line\">\tb = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/***************维护最大堆函数*****************/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Max_Heapify</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> i, <span class=\"keyword\">int</span> Heap_size)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> left = Left(i);      <span class=\"comment\">//左孩子</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> right = Right(i);    <span class=\"comment\">//右孩子</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> largest_num = i;     <span class=\"comment\">//存放最大值的下标</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (left &lt; Heap_size &amp;&amp; A[left] &gt; A[i])&#123;</span><br><span class=\"line\">\t\tlargest_num = left;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (right &lt; Heap_size &amp;&amp; A[right] &gt; A[largest_num])&#123;      <span class=\"comment\">//注意：这里一定要是largerst</span></span><br><span class=\"line\">\t\tlargest_num = right;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (largest_num != i)&#123;</span><br><span class=\"line\">\t\tSwap(A[i], A[largest_num]);</span><br><span class=\"line\">\t\tMax_Heapify(A, largest_num, Heap_size);   <span class=\"comment\">//递归调用，确保调换后保证最大堆的性质， 因为建堆是倒序的</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/***************建立最大堆函数*************************/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Build_MaxHeap</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> Heap_size)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = (Heap_size<span class=\"number\">-2</span>)/<span class=\"number\">2</span>; i &gt;= <span class=\"number\">0</span>; i--)&#123;    <span class=\"comment\">//从有孩子的结点开始建堆        </span></span><br><span class=\"line\">\t\tMax_Heapify(A, i, Heap_size);              <span class=\"comment\">//从下往上维护最大堆</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/***************堆排序算法**********************/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Heap_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> Heap_size)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tBuild_MaxHeap(A, Heap_size);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = Heap_size<span class=\"number\">-1</span>; i&gt;<span class=\"number\">0</span>; i--)&#123;</span><br><span class=\"line\">\t\tSwap(A[i], A[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\t\tMax_Heapify(A, <span class=\"number\">0</span>, i);           <span class=\"comment\">//A.lenth -- 交换完A[0]最大值后，要断开</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span>  **argv)</span></span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> aa[] = &#123;<span class=\"number\">4</span>,<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">16</span>,<span class=\"number\">9</span>,<span class=\"number\">10</span>,<span class=\"number\">14</span>,<span class=\"number\">8</span>,<span class=\"number\">7</span>&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> Heap_size = <span class=\"keyword\">sizeof</span>(aa) / <span class=\"keyword\">sizeof</span>(aa[<span class=\"number\">0</span>]);  <span class=\"comment\">//C++算数组长度，也可用sizeof(aa)/sizeof(int);</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\tHeap_sort(aa, Heap_size);  <span class=\"comment\">//堆排序算法</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; Heap_size;i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; aa[i] &lt;&lt; <span class=\"built_in\">endl</span>;            <span class=\"comment\">//输出数组</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"最大优先级队列\"><a href=\"#最大优先级队列\" class=\"headerlink\" title=\"最大优先级队列\"></a>最大优先级队列</h2><h4 id=\"实质是对一个最大堆的查找，插入，删除操作\"><a href=\"#实质是对一个最大堆的查找，插入，删除操作\" class=\"headerlink\" title=\"实质是对一个最大堆的查找，插入，删除操作\"></a>实质是对一个<strong>最大堆</strong>的查找，插入，删除操作</h4><ul>\n<li>Insert(S, x): 把元素x插入最大堆S中。</li>\n<li>Maximum(S): 返回S中具有最大关键字的元素</li>\n<li>Increase-Key(S,x,k): 将元素x的值增加到k后维护最大堆</li>\n</ul>\n<p>1.Increase-Key(S,x,k)：该增加后的值不断与父结点比较。</p>\n<p>2.插入元素到最大堆：先把元素放到堆尾，然后调用Increase-Key(S,x,k)</p>\n"},{"date":"2018-11-23T14:33:00.000Z","status":"public","title":"二叉搜索树","_content":"\n## 二叉搜索树\n\n> 参考资料: 《算法导论》\n> Reference URL:  `https://www.cnblogs.com/skywang12345/p/3576328.html`\n\n","source":"_posts/Algorithm/╢■▓ц╦╤╦ў╩ў.md","raw":"---\ndate: 2018-11-23 14:33\nstatus: public\ntitle: 二叉搜索树\ncategories: Algorithm\ntags: Algorithm\n---\n\n## 二叉搜索树\n\n> 参考资料: 《算法导论》\n> Reference URL:  `https://www.cnblogs.com/skywang12345/p/3576328.html`\n\n","slug":"Algorithm/╢■▓ц╦╤╦ў╩ў","published":1,"updated":"2018-12-18T03:55:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjptii4dv0008afppk2r5xxc2","content":"<h2 id=\"二叉搜索树\"><a href=\"#二叉搜索树\" class=\"headerlink\" title=\"二叉搜索树\"></a>二叉搜索树</h2><blockquote>\n<p>参考资料: 《算法导论》<br>Reference URL:  <code>https://www.cnblogs.com/skywang12345/p/3576328.html</code></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"二叉搜索树\"><a href=\"#二叉搜索树\" class=\"headerlink\" title=\"二叉搜索树\"></a>二叉搜索树</h2><blockquote>\n<p>参考资料: 《算法导论》<br>Reference URL:  <code>https://www.cnblogs.com/skywang12345/p/3576328.html</code></p>\n</blockquote>\n"},{"date":"2018-11-01T20:14:00.000Z","status":"public","title":"归并排序","_content":"\n## 归并排序\n　　归并排序（MERGE-SORT）是利用归并的思想实现的排序方法，该算法采用经典的分治（divide-and-conquer）策略（分治法将问题分(divide)成一些小的问题然后递归求解，而治(conquer)的阶段则将分的阶段得到的各答案\"修补\"在一起，即分而治之)。\n\n#### 堆排序特点\n- 不是原址排序\n- 不稳定排序\n- T(n)=nlgn\n\n#### 归并排序步骤：\n\n**1. 合并相邻有序子序列**\n需要将两个已经有序的子序列合并成一个有序序列，eg [4,5,7,8]和[1,2,3,6]两个已经有序的子序列，合并为最终序列[1,2,3,4,5,6,7,8]。\n\n![merge1](./image/merge2.png)\n\n**2. 递归 分而治之**\n\n![merge1.png](./image/merge1.png)\n\n----\n\n#### C++代码实现过程\n\n```C++\n/* filename: Merge_sort.cpp\n *\n * Author:   xblin\n */\n\n#include <iostream>\nusing namespace std;\n#define INF 1000000    //定义一个伪无穷大\n\n/*****************合并函数***************************/\nvoid Merge(int A[], int left, int mid, int right){\n\tint lenth1 = mid - left + 1;\n\tint lenth2 = right - mid;\n\tint *L = new int[lenth1+1];   //+1 为了存放结束标志\n\tint *R = new int[lenth2+1];   //+1 为了存放结束标志\n\n\tfor (int i = 0; i < lenth1; i++)\n\t\tL[i] = A[i + left];\n\tfor (int j = 0; j < lenth2; j++)\n\t\tR[j] = A[j + mid + 1];\n\tL[lenth1] = INF;  //宏定义无穷大，结束标志\n\tR[lenth2] = INF;  //宏定义无穷大，结束标志\n\tfor (int i=0,j=0,k=left; k <= right; k++){   //从left遍历到right\n\t\tif (L[i] < R[j])\n\t\t\tA[k] = L[i++];\n\t\telse\n\t\t\tA[k] = R[j++];\n\t}\n\tdelete[]L;\n\tdelete[]R;\n}\n/*******************归并递归函数**********************/\nvoid Merge_sort(int A[], int left, int right){\n\tif (left < right){\n\t\tint mid = (left + right) / 2;\n\t\tMerge_sort(A, left, mid);\n\t\tMerge_sort(A, mid + 1, right);\n\t\tMerge(A, left, mid, right);\n\t}\n}\nint main(int argc, char **argv){\n\n\tint aa[] = {1,3,5,4,6,2};\n\tint Array_size = sizeof(aa) / sizeof(aa[0]);\n\tMerge_sort(aa, 0, Array_size-1);\n\tfor (int i = 0; i <= Array_size-1; i++)\n\t\tcout << aa[i] << endl;\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/Algorithm/╣щ▓в┼┼╨Є.md","raw":"---\ndate: 2018-11-01 20:14\nstatus: public\ntitle: 归并排序\ncategories: Algorithm\ntags: Algorithm\n---\n\n## 归并排序\n　　归并排序（MERGE-SORT）是利用归并的思想实现的排序方法，该算法采用经典的分治（divide-and-conquer）策略（分治法将问题分(divide)成一些小的问题然后递归求解，而治(conquer)的阶段则将分的阶段得到的各答案\"修补\"在一起，即分而治之)。\n\n#### 堆排序特点\n- 不是原址排序\n- 不稳定排序\n- T(n)=nlgn\n\n#### 归并排序步骤：\n\n**1. 合并相邻有序子序列**\n需要将两个已经有序的子序列合并成一个有序序列，eg [4,5,7,8]和[1,2,3,6]两个已经有序的子序列，合并为最终序列[1,2,3,4,5,6,7,8]。\n\n![merge1](./image/merge2.png)\n\n**2. 递归 分而治之**\n\n![merge1.png](./image/merge1.png)\n\n----\n\n#### C++代码实现过程\n\n```C++\n/* filename: Merge_sort.cpp\n *\n * Author:   xblin\n */\n\n#include <iostream>\nusing namespace std;\n#define INF 1000000    //定义一个伪无穷大\n\n/*****************合并函数***************************/\nvoid Merge(int A[], int left, int mid, int right){\n\tint lenth1 = mid - left + 1;\n\tint lenth2 = right - mid;\n\tint *L = new int[lenth1+1];   //+1 为了存放结束标志\n\tint *R = new int[lenth2+1];   //+1 为了存放结束标志\n\n\tfor (int i = 0; i < lenth1; i++)\n\t\tL[i] = A[i + left];\n\tfor (int j = 0; j < lenth2; j++)\n\t\tR[j] = A[j + mid + 1];\n\tL[lenth1] = INF;  //宏定义无穷大，结束标志\n\tR[lenth2] = INF;  //宏定义无穷大，结束标志\n\tfor (int i=0,j=0,k=left; k <= right; k++){   //从left遍历到right\n\t\tif (L[i] < R[j])\n\t\t\tA[k] = L[i++];\n\t\telse\n\t\t\tA[k] = R[j++];\n\t}\n\tdelete[]L;\n\tdelete[]R;\n}\n/*******************归并递归函数**********************/\nvoid Merge_sort(int A[], int left, int right){\n\tif (left < right){\n\t\tint mid = (left + right) / 2;\n\t\tMerge_sort(A, left, mid);\n\t\tMerge_sort(A, mid + 1, right);\n\t\tMerge(A, left, mid, right);\n\t}\n}\nint main(int argc, char **argv){\n\n\tint aa[] = {1,3,5,4,6,2};\n\tint Array_size = sizeof(aa) / sizeof(aa[0]);\n\tMerge_sort(aa, 0, Array_size-1);\n\tfor (int i = 0; i <= Array_size-1; i++)\n\t\tcout << aa[i] << endl;\n\treturn 0;\n}\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"Algorithm/╣щ▓в┼┼╨Є","published":1,"updated":"2018-12-18T03:55:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjptii4e9000cafppo3mk4wa8","content":"<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><p>　　归并排序（MERGE-SORT）是利用归并的思想实现的排序方法，该算法采用经典的分治（divide-and-conquer）策略（分治法将问题分(divide)成一些小的问题然后递归求解，而治(conquer)的阶段则将分的阶段得到的各答案”修补”在一起，即分而治之)。</p>\n<h4 id=\"堆排序特点\"><a href=\"#堆排序特点\" class=\"headerlink\" title=\"堆排序特点\"></a>堆排序特点</h4><ul>\n<li>不是原址排序</li>\n<li>不稳定排序</li>\n<li>T(n)=nlgn</li>\n</ul>\n<h4 id=\"归并排序步骤：\"><a href=\"#归并排序步骤：\" class=\"headerlink\" title=\"归并排序步骤：\"></a>归并排序步骤：</h4><p><strong>1. 合并相邻有序子序列</strong><br>需要将两个已经有序的子序列合并成一个有序序列，eg [4,5,7,8]和[1,2,3,6]两个已经有序的子序列，合并为最终序列[1,2,3,4,5,6,7,8]。</p>\n<p><img src=\"./image/merge2.png\" alt=\"merge1\"></p>\n<p><strong>2. 递归 分而治之</strong></p>\n<p><img src=\"./image/merge1.png\" alt=\"merge1.png\"></p>\n<hr>\n<h4 id=\"C-代码实现过程\"><a href=\"#C-代码实现过程\" class=\"headerlink\" title=\"C++代码实现过程\"></a>C++代码实现过程</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* filename: Merge_sort.cpp</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author:   xblin</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 1000000    <span class=\"comment\">//定义一个伪无穷大</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*****************合并函数***************************/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Merge</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> mid, <span class=\"keyword\">int</span> right)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> lenth1 = mid - left + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> lenth2 = right - mid;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> *L = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[lenth1+<span class=\"number\">1</span>];   <span class=\"comment\">//+1 为了存放结束标志</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> *R = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[lenth2+<span class=\"number\">1</span>];   <span class=\"comment\">//+1 为了存放结束标志</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; lenth1; i++)</span><br><span class=\"line\">\t\tL[i] = A[i + left];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; lenth2; j++)</span><br><span class=\"line\">\t\tR[j] = A[j + mid + <span class=\"number\">1</span>];</span><br><span class=\"line\">\tL[lenth1] = INF;  <span class=\"comment\">//宏定义无穷大，结束标志</span></span><br><span class=\"line\">\tR[lenth2] = INF;  <span class=\"comment\">//宏定义无穷大，结束标志</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>,j=<span class=\"number\">0</span>,k=left; k &lt;= right; k++)&#123;   <span class=\"comment\">//从left遍历到right</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (L[i] &lt; R[j])</span><br><span class=\"line\">\t\t\tA[k] = L[i++];</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\tA[k] = R[j++];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span>[]L;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span>[]R;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*******************归并递归函数**********************/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Merge_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (left &lt; right)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\tMerge_sort(A, left, mid);</span><br><span class=\"line\">\t\tMerge_sort(A, mid + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">\t\tMerge(A, left, mid, right);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> aa[] = &#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> Array_size = <span class=\"keyword\">sizeof</span>(aa) / <span class=\"keyword\">sizeof</span>(aa[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\tMerge_sort(aa, <span class=\"number\">0</span>, Array_size<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= Array_size<span class=\"number\">-1</span>; i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; aa[i] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><p>　　归并排序（MERGE-SORT）是利用归并的思想实现的排序方法，该算法采用经典的分治（divide-and-conquer）策略（分治法将问题分(divide)成一些小的问题然后递归求解，而治(conquer)的阶段则将分的阶段得到的各答案”修补”在一起，即分而治之)。</p>\n<h4 id=\"堆排序特点\"><a href=\"#堆排序特点\" class=\"headerlink\" title=\"堆排序特点\"></a>堆排序特点</h4><ul>\n<li>不是原址排序</li>\n<li>不稳定排序</li>\n<li>T(n)=nlgn</li>\n</ul>\n<h4 id=\"归并排序步骤：\"><a href=\"#归并排序步骤：\" class=\"headerlink\" title=\"归并排序步骤：\"></a>归并排序步骤：</h4><p><strong>1. 合并相邻有序子序列</strong><br>需要将两个已经有序的子序列合并成一个有序序列，eg [4,5,7,8]和[1,2,3,6]两个已经有序的子序列，合并为最终序列[1,2,3,4,5,6,7,8]。</p>\n<p><img src=\"./image/merge2.png\" alt=\"merge1\"></p>\n<p><strong>2. 递归 分而治之</strong></p>\n<p><img src=\"./image/merge1.png\" alt=\"merge1.png\"></p>\n<hr>\n<h4 id=\"C-代码实现过程\"><a href=\"#C-代码实现过程\" class=\"headerlink\" title=\"C++代码实现过程\"></a>C++代码实现过程</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* filename: Merge_sort.cpp</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Author:   xblin</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> INF 1000000    <span class=\"comment\">//定义一个伪无穷大</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*****************合并函数***************************/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Merge</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> mid, <span class=\"keyword\">int</span> right)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> lenth1 = mid - left + <span class=\"number\">1</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> lenth2 = right - mid;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> *L = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[lenth1+<span class=\"number\">1</span>];   <span class=\"comment\">//+1 为了存放结束标志</span></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> *R = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[lenth2+<span class=\"number\">1</span>];   <span class=\"comment\">//+1 为了存放结束标志</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; lenth1; i++)</span><br><span class=\"line\">\t\tL[i] = A[i + left];</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; lenth2; j++)</span><br><span class=\"line\">\t\tR[j] = A[j + mid + <span class=\"number\">1</span>];</span><br><span class=\"line\">\tL[lenth1] = INF;  <span class=\"comment\">//宏定义无穷大，结束标志</span></span><br><span class=\"line\">\tR[lenth2] = INF;  <span class=\"comment\">//宏定义无穷大，结束标志</span></span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>,j=<span class=\"number\">0</span>,k=left; k &lt;= right; k++)&#123;   <span class=\"comment\">//从left遍历到right</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (L[i] &lt; R[j])</span><br><span class=\"line\">\t\t\tA[k] = L[i++];</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span></span><br><span class=\"line\">\t\t\tA[k] = R[j++];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span>[]L;</span><br><span class=\"line\">\t<span class=\"keyword\">delete</span>[]R;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/*******************归并递归函数**********************/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">Merge_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> A[], <span class=\"keyword\">int</span> left, <span class=\"keyword\">int</span> right)</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (left &lt; right)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> mid = (left + right) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\tMerge_sort(A, left, mid);</span><br><span class=\"line\">\t\tMerge_sort(A, mid + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">\t\tMerge(A, left, mid, right);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">int</span> argc, <span class=\"keyword\">char</span> **argv)</span></span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">int</span> aa[] = &#123;<span class=\"number\">1</span>,<span class=\"number\">3</span>,<span class=\"number\">5</span>,<span class=\"number\">4</span>,<span class=\"number\">6</span>,<span class=\"number\">2</span>&#125;;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> Array_size = <span class=\"keyword\">sizeof</span>(aa) / <span class=\"keyword\">sizeof</span>(aa[<span class=\"number\">0</span>]);</span><br><span class=\"line\">\tMerge_sort(aa, <span class=\"number\">0</span>, Array_size<span class=\"number\">-1</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt;= Array_size<span class=\"number\">-1</span>; i++)</span><br><span class=\"line\">\t\t<span class=\"built_in\">cout</span> &lt;&lt; aa[i] &lt;&lt; <span class=\"built_in\">endl</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"date":"2018-11-15T10:40:00.000Z","status":"public","title":"Git安装配置和使用","password":"a1b2c3.","_content":"\n## 密钥\n\n**公钥与私钥：**\n\n1.公钥加密，私钥解密\n2.私钥数字签名，公钥验证\n\n## SSH密码登陆原理（公钥加密）\n\n**用户登陆远程机：**\n\n1.远程主机收到用户的登录请求，把自己的公钥发给用户\n2.用户使用这个公钥，将登陆密码加密后，发给远程机\n3.远程机用自己的私钥，解密登陆密码，确定正确，同意用户登陆\n\n**解决存在风险： 中间人攻击**\n\n截获用户登陆请求，冒充远程机，伪造公钥发给用户，获取远程机密码\n1.known_hosts文件 （区别于authorized_keys文件）\n当用户接收远程主机的公钥后，它就会被保存在文件`~/.ssh/known_hosts`之中。下次再连接这台主机，系统就会认出它的公钥已经保存在本地了，可以辨别中间人的伪造公钥。\n2.口令登陆\n第一次登陆远程机，用户没有其公钥，为防止中间人攻击，系统会出现下面提示：\n```sh\n$ ssh user@host\n\n　　The authenticity of host 'host (12.18.429.21)' can't be established.\n\n　　RSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d.\n\n　　Are you sure you want to continue connecting (yes/no)?\n```\n提示：无法确认host主机的真实性，只知道它的公钥指纹，是否继续登陆？\n上面　`98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d` 就是远程机的公钥指纹，为了安全登陆，可以确认远程机的公钥指纹，一般远程机会贴在自己的网站上，以便用户自行核对。\n\n## SSH免密登陆原理(RSA加密技术)\n\nStep1：SSH密钥配置\n1.在A上生成密钥对\n2.将A的公钥拷贝到B上\n3.在B上将A的公钥写入到授权列表文件authorized_keys中\n\n![](http://wx4.sinaimg.cn/large/007fPWmPly1fy41o2n2plj30d3097wfo.jpg)\n\n\nStep2: SSH免密登陆原理（git登陆原理，B相当于git服务器）\n1.A请求登陆B\n2.B查看授权列表\n3.B把A的公钥加密一随机字符串发给A\n4.A用私钥解密B发送过来的字符串\n5.A用私钥加密结果发送给B（数字签名）\n6.B用A的公钥验证A发过来的解密字符串\n7.验证通过登陆成功\n\n![](http://wx1.sinaimg.cn/large/007fPWmPly1fy41o2x097j30j608babp.jpg)\n\n\n\n\n## SSH生成迷密钥对\n\n`ssh-keygen -t rsa -f ~/.ssh/id_rsa.${name} -P \"\" -q`\n\n-t参数：加密方式rsa\n-f参数：文件名及保存路径 eg： id_rsa.xblin id_rsa.xblin.pub\n-P参数：提取密钥的密码，默认为无\n\n\n### 配置config文件\n\n`~/.ssh/config ` \nSSH默认读取id_rsa这个私钥\n修改配置指定路径和名字：\n\n1.Host          #主机地址  \n2.User          #认证用户\n3.IdentifyFile  #认证私钥路径 \n\n> Tips : Host * 匹配所有的主机\n\neg：\n\n```\nHost icode.baidu.com\nUser linxubin\nIdentityFile ~/.ssh/id_rsa.linxubin\n```\n\n> Important: config文件权限必须是644\n\n### Shell脚本代码实现\n\n```sh\n#!/bin/bash\nusage(){\n    echo \n}\n\nssh_config(){\n    name=$1\n    Remote_Host=$2\n\n    yum install -y expect\n\n    if [[ ! -f ~/.ssh/id_rsa.${name}.pub ]]; then\n        ssh-keygen -t rsa -f ~/.ssh/id_rsa.$1 -P \"\" -q  #no passphrase\n\n        echo \"Host *\" >> ~/.ssh/config\n        echo \"User ${name}\" >> ~/.ssh/config\n        echo \"IdentityFile ~/.ssh/id_rsa.${name}\" >> ~/.ssh/config\n\n        chmod 644 ~/.ssh/config  # chmod must 644\n    fi\n\n    ssh root@${Remote_Host} \"cat >> /root/.ssh/authorized_keys\" < /root/.ssh/id_rsa.${name}.pub\n}\n\nssh_config $1 $2\n```\n\n## Github ssh配置\n\n### 一. git clone命令\n本地主机clone远程github仓库不需要建立信任关系\n\n### 二. ssh建立信任关系\n1.生成密钥对： `ssh-keygen -t rsa ` \n2.gitconfig配置 \n\n```\n$ git config --global user.name \"xxx\"   ##github用户名\n$ git config --global user.email xxx@example.com  ##github注册邮箱\n```\n\n- /etc/gitconfig 文件：系统中对所有用户都普遍适用的配置。若使用 git config 时用 --system 选项，读写的就是这个文件\n- ~/.gitconfig 文件：用户目录下的配置文件只适用于该用户。若使用 git config 时用 --global 选项，读写的就是这个文件。\n- 当前项目的 Git 目录中的配置文件（也就是工作目录中的 .git/config 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 .git/config 里的配置会覆盖 /etc/gitconfig 中的同名变量。\n\n3.指定生成密钥的名字\n- 生成密钥对（指定名字） `ssh-keygen -t rsa -f ~/.ssh/id_rsa.lxbgithub`\n- 配置 ~/.ssh/config 文件\n\n```\nHost github.com\nUser xblin\nIdentityFile ~/.ssh/id_rsa.lxbgithub\n```\n\n----\n","source":"_posts/Linux/Git░▓╫░┼ф╓├║═╩╣╙├.md","raw":"---\ndate: 2018-11-15 10:40\nstatus: public\ntitle: Git安装配置和使用\ncategories: Linux\npassword: a1b2c3.\ntags: Linux\n---\n\n## 密钥\n\n**公钥与私钥：**\n\n1.公钥加密，私钥解密\n2.私钥数字签名，公钥验证\n\n## SSH密码登陆原理（公钥加密）\n\n**用户登陆远程机：**\n\n1.远程主机收到用户的登录请求，把自己的公钥发给用户\n2.用户使用这个公钥，将登陆密码加密后，发给远程机\n3.远程机用自己的私钥，解密登陆密码，确定正确，同意用户登陆\n\n**解决存在风险： 中间人攻击**\n\n截获用户登陆请求，冒充远程机，伪造公钥发给用户，获取远程机密码\n1.known_hosts文件 （区别于authorized_keys文件）\n当用户接收远程主机的公钥后，它就会被保存在文件`~/.ssh/known_hosts`之中。下次再连接这台主机，系统就会认出它的公钥已经保存在本地了，可以辨别中间人的伪造公钥。\n2.口令登陆\n第一次登陆远程机，用户没有其公钥，为防止中间人攻击，系统会出现下面提示：\n```sh\n$ ssh user@host\n\n　　The authenticity of host 'host (12.18.429.21)' can't be established.\n\n　　RSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d.\n\n　　Are you sure you want to continue connecting (yes/no)?\n```\n提示：无法确认host主机的真实性，只知道它的公钥指纹，是否继续登陆？\n上面　`98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d` 就是远程机的公钥指纹，为了安全登陆，可以确认远程机的公钥指纹，一般远程机会贴在自己的网站上，以便用户自行核对。\n\n## SSH免密登陆原理(RSA加密技术)\n\nStep1：SSH密钥配置\n1.在A上生成密钥对\n2.将A的公钥拷贝到B上\n3.在B上将A的公钥写入到授权列表文件authorized_keys中\n\n![](http://wx4.sinaimg.cn/large/007fPWmPly1fy41o2n2plj30d3097wfo.jpg)\n\n\nStep2: SSH免密登陆原理（git登陆原理，B相当于git服务器）\n1.A请求登陆B\n2.B查看授权列表\n3.B把A的公钥加密一随机字符串发给A\n4.A用私钥解密B发送过来的字符串\n5.A用私钥加密结果发送给B（数字签名）\n6.B用A的公钥验证A发过来的解密字符串\n7.验证通过登陆成功\n\n![](http://wx1.sinaimg.cn/large/007fPWmPly1fy41o2x097j30j608babp.jpg)\n\n\n\n\n## SSH生成迷密钥对\n\n`ssh-keygen -t rsa -f ~/.ssh/id_rsa.${name} -P \"\" -q`\n\n-t参数：加密方式rsa\n-f参数：文件名及保存路径 eg： id_rsa.xblin id_rsa.xblin.pub\n-P参数：提取密钥的密码，默认为无\n\n\n### 配置config文件\n\n`~/.ssh/config ` \nSSH默认读取id_rsa这个私钥\n修改配置指定路径和名字：\n\n1.Host          #主机地址  \n2.User          #认证用户\n3.IdentifyFile  #认证私钥路径 \n\n> Tips : Host * 匹配所有的主机\n\neg：\n\n```\nHost icode.baidu.com\nUser linxubin\nIdentityFile ~/.ssh/id_rsa.linxubin\n```\n\n> Important: config文件权限必须是644\n\n### Shell脚本代码实现\n\n```sh\n#!/bin/bash\nusage(){\n    echo \n}\n\nssh_config(){\n    name=$1\n    Remote_Host=$2\n\n    yum install -y expect\n\n    if [[ ! -f ~/.ssh/id_rsa.${name}.pub ]]; then\n        ssh-keygen -t rsa -f ~/.ssh/id_rsa.$1 -P \"\" -q  #no passphrase\n\n        echo \"Host *\" >> ~/.ssh/config\n        echo \"User ${name}\" >> ~/.ssh/config\n        echo \"IdentityFile ~/.ssh/id_rsa.${name}\" >> ~/.ssh/config\n\n        chmod 644 ~/.ssh/config  # chmod must 644\n    fi\n\n    ssh root@${Remote_Host} \"cat >> /root/.ssh/authorized_keys\" < /root/.ssh/id_rsa.${name}.pub\n}\n\nssh_config $1 $2\n```\n\n## Github ssh配置\n\n### 一. git clone命令\n本地主机clone远程github仓库不需要建立信任关系\n\n### 二. ssh建立信任关系\n1.生成密钥对： `ssh-keygen -t rsa ` \n2.gitconfig配置 \n\n```\n$ git config --global user.name \"xxx\"   ##github用户名\n$ git config --global user.email xxx@example.com  ##github注册邮箱\n```\n\n- /etc/gitconfig 文件：系统中对所有用户都普遍适用的配置。若使用 git config 时用 --system 选项，读写的就是这个文件\n- ~/.gitconfig 文件：用户目录下的配置文件只适用于该用户。若使用 git config 时用 --global 选项，读写的就是这个文件。\n- 当前项目的 Git 目录中的配置文件（也就是工作目录中的 .git/config 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 .git/config 里的配置会覆盖 /etc/gitconfig 中的同名变量。\n\n3.指定生成密钥的名字\n- 生成密钥对（指定名字） `ssh-keygen -t rsa -f ~/.ssh/id_rsa.lxbgithub`\n- 配置 ~/.ssh/config 文件\n\n```\nHost github.com\nUser xblin\nIdentityFile ~/.ssh/id_rsa.lxbgithub\n```\n\n----\n","slug":"Linux/Git░▓╫░┼ф╓├║═╩╣╙├","published":1,"updated":"2018-12-18T03:55:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjptii4ex000eafpp8mjifo8c","content":"<h2 id=\"密钥\"><a href=\"#密钥\" class=\"headerlink\" title=\"密钥\"></a>密钥</h2><p><strong>公钥与私钥：</strong></p>\n<p>1.公钥加密，私钥解密<br>2.私钥数字签名，公钥验证</p>\n<h2 id=\"SSH密码登陆原理（公钥加密）\"><a href=\"#SSH密码登陆原理（公钥加密）\" class=\"headerlink\" title=\"SSH密码登陆原理（公钥加密）\"></a>SSH密码登陆原理（公钥加密）</h2><p><strong>用户登陆远程机：</strong></p>\n<p>1.远程主机收到用户的登录请求，把自己的公钥发给用户<br>2.用户使用这个公钥，将登陆密码加密后，发给远程机<br>3.远程机用自己的私钥，解密登陆密码，确定正确，同意用户登陆</p>\n<p><strong>解决存在风险： 中间人攻击</strong></p>\n<p>截获用户登陆请求，冒充远程机，伪造公钥发给用户，获取远程机密码<br>1.known_hosts文件 （区别于authorized_keys文件）<br>当用户接收远程主机的公钥后，它就会被保存在文件<code>~/.ssh/known_hosts</code>之中。下次再连接这台主机，系统就会认出它的公钥已经保存在本地了，可以辨别中间人的伪造公钥。<br>2.口令登陆<br>第一次登陆远程机，用户没有其公钥，为防止中间人攻击，系统会出现下面提示：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh user@host</span><br><span class=\"line\"></span><br><span class=\"line\">　　The authenticity of host <span class=\"string\">'host (12.18.429.21)'</span> can<span class=\"string\">'t be established.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">　　RSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">　　Are you sure you want to continue connecting (yes/no)?</span></span><br></pre></td></tr></table></figure></p>\n<p>提示：无法确认host主机的真实性，只知道它的公钥指纹，是否继续登陆？<br>上面　<code>98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d</code> 就是远程机的公钥指纹，为了安全登陆，可以确认远程机的公钥指纹，一般远程机会贴在自己的网站上，以便用户自行核对。</p>\n<h2 id=\"SSH免密登陆原理-RSA加密技术\"><a href=\"#SSH免密登陆原理-RSA加密技术\" class=\"headerlink\" title=\"SSH免密登陆原理(RSA加密技术)\"></a>SSH免密登陆原理(RSA加密技术)</h2><p>Step1：SSH密钥配置<br>1.在A上生成密钥对<br>2.将A的公钥拷贝到B上<br>3.在B上将A的公钥写入到授权列表文件authorized_keys中</p>\n<p><img src=\"http://wx4.sinaimg.cn/large/007fPWmPly1fy41o2n2plj30d3097wfo.jpg\" alt=\"\"></p>\n<p>Step2: SSH免密登陆原理（git登陆原理，B相当于git服务器）<br>1.A请求登陆B<br>2.B查看授权列表<br>3.B把A的公钥加密一随机字符串发给A<br>4.A用私钥解密B发送过来的字符串<br>5.A用私钥加密结果发送给B（数字签名）<br>6.B用A的公钥验证A发过来的解密字符串<br>7.验证通过登陆成功</p>\n<p><img src=\"http://wx1.sinaimg.cn/large/007fPWmPly1fy41o2x097j30j608babp.jpg\" alt=\"\"></p>\n<h2 id=\"SSH生成迷密钥对\"><a href=\"#SSH生成迷密钥对\" class=\"headerlink\" title=\"SSH生成迷密钥对\"></a>SSH生成迷密钥对</h2><p><code>ssh-keygen -t rsa -f ~/.ssh/id_rsa.${name} -P &quot;&quot; -q</code></p>\n<p>-t参数：加密方式rsa<br>-f参数：文件名及保存路径 eg： id_rsa.xblin id_rsa.xblin.pub<br>-P参数：提取密钥的密码，默认为无</p>\n<h3 id=\"配置config文件\"><a href=\"#配置config文件\" class=\"headerlink\" title=\"配置config文件\"></a>配置config文件</h3><p><code>~/.ssh/config</code><br>SSH默认读取id_rsa这个私钥<br>修改配置指定路径和名字：</p>\n<p>1.Host          #主机地址<br>2.User          #认证用户<br>3.IdentifyFile  #认证私钥路径 </p>\n<blockquote>\n<p>Tips : Host * 匹配所有的主机</p>\n</blockquote>\n<p>eg：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host icode.baidu.com</span><br><span class=\"line\">User linxubin</span><br><span class=\"line\">IdentityFile ~/.ssh/id_rsa.linxubin</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Important: config文件权限必须是644</p>\n</blockquote>\n<h3 id=\"Shell脚本代码实现\"><a href=\"#Shell脚本代码实现\" class=\"headerlink\" title=\"Shell脚本代码实现\"></a>Shell脚本代码实现</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">usage</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">ssh_config</span></span>()&#123;</span><br><span class=\"line\">    name=<span class=\"variable\">$1</span></span><br><span class=\"line\">    Remote_Host=<span class=\"variable\">$2</span></span><br><span class=\"line\"></span><br><span class=\"line\">    yum install -y expect</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ ! -f ~/.ssh/id_rsa.<span class=\"variable\">$&#123;name&#125;</span>.pub ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        ssh-keygen -t rsa -f ~/.ssh/id_rsa.<span class=\"variable\">$1</span> -P <span class=\"string\">\"\"</span> -q  <span class=\"comment\">#no passphrase</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"Host *\"</span> &gt;&gt; ~/.ssh/config</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"User <span class=\"variable\">$&#123;name&#125;</span>\"</span> &gt;&gt; ~/.ssh/config</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"IdentityFile ~/.ssh/id_rsa.<span class=\"variable\">$&#123;name&#125;</span>\"</span> &gt;&gt; ~/.ssh/config</span><br><span class=\"line\"></span><br><span class=\"line\">        chmod 644 ~/.ssh/config  <span class=\"comment\"># chmod must 644</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ssh root@<span class=\"variable\">$&#123;Remote_Host&#125;</span> <span class=\"string\">\"cat &gt;&gt; /root/.ssh/authorized_keys\"</span> &lt; /root/.ssh/id_rsa.<span class=\"variable\">$&#123;name&#125;</span>.pub</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ssh_config <span class=\"variable\">$1</span> <span class=\"variable\">$2</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Github-ssh配置\"><a href=\"#Github-ssh配置\" class=\"headerlink\" title=\"Github ssh配置\"></a>Github ssh配置</h2><h3 id=\"一-git-clone命令\"><a href=\"#一-git-clone命令\" class=\"headerlink\" title=\"一. git clone命令\"></a>一. git clone命令</h3><p>本地主机clone远程github仓库不需要建立信任关系</p>\n<h3 id=\"二-ssh建立信任关系\"><a href=\"#二-ssh建立信任关系\" class=\"headerlink\" title=\"二. ssh建立信任关系\"></a>二. ssh建立信任关系</h3><p>1.生成密钥对： <code>ssh-keygen -t rsa</code><br>2.gitconfig配置 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name &quot;xxx&quot;   ##github用户名</span><br><span class=\"line\">$ git config --global user.email xxx@example.com  ##github注册邮箱</span><br></pre></td></tr></table></figure>\n<ul>\n<li>/etc/gitconfig 文件：系统中对所有用户都普遍适用的配置。若使用 git config 时用 –system 选项，读写的就是这个文件</li>\n<li>~/.gitconfig 文件：用户目录下的配置文件只适用于该用户。若使用 git config 时用 –global 选项，读写的就是这个文件。</li>\n<li>当前项目的 Git 目录中的配置文件（也就是工作目录中的 .git/config 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 .git/config 里的配置会覆盖 /etc/gitconfig 中的同名变量。</li>\n</ul>\n<p>3.指定生成密钥的名字</p>\n<ul>\n<li>生成密钥对（指定名字） <code>ssh-keygen -t rsa -f ~/.ssh/id_rsa.lxbgithub</code></li>\n<li>配置 ~/.ssh/config 文件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host github.com</span><br><span class=\"line\">User xblin</span><br><span class=\"line\">IdentityFile ~/.ssh/id_rsa.lxbgithub</span><br></pre></td></tr></table></figure>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"密钥\"><a href=\"#密钥\" class=\"headerlink\" title=\"密钥\"></a>密钥</h2><p><strong>公钥与私钥：</strong></p>\n<p>1.公钥加密，私钥解密<br>2.私钥数字签名，公钥验证</p>\n<h2 id=\"SSH密码登陆原理（公钥加密）\"><a href=\"#SSH密码登陆原理（公钥加密）\" class=\"headerlink\" title=\"SSH密码登陆原理（公钥加密）\"></a>SSH密码登陆原理（公钥加密）</h2><p><strong>用户登陆远程机：</strong></p>\n<p>1.远程主机收到用户的登录请求，把自己的公钥发给用户<br>2.用户使用这个公钥，将登陆密码加密后，发给远程机<br>3.远程机用自己的私钥，解密登陆密码，确定正确，同意用户登陆</p>\n<p><strong>解决存在风险： 中间人攻击</strong></p>\n<p>截获用户登陆请求，冒充远程机，伪造公钥发给用户，获取远程机密码<br>1.known_hosts文件 （区别于authorized_keys文件）<br>当用户接收远程主机的公钥后，它就会被保存在文件<code>~/.ssh/known_hosts</code>之中。下次再连接这台主机，系统就会认出它的公钥已经保存在本地了，可以辨别中间人的伪造公钥。<br>2.口令登陆<br>第一次登陆远程机，用户没有其公钥，为防止中间人攻击，系统会出现下面提示：<br><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh user@host</span><br><span class=\"line\"></span><br><span class=\"line\">　　The authenticity of host <span class=\"string\">'host (12.18.429.21)'</span> can<span class=\"string\">'t be established.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">　　RSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">　　Are you sure you want to continue connecting (yes/no)?</span></span><br></pre></td></tr></table></figure></p>\n<p>提示：无法确认host主机的真实性，只知道它的公钥指纹，是否继续登陆？<br>上面　<code>98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d</code> 就是远程机的公钥指纹，为了安全登陆，可以确认远程机的公钥指纹，一般远程机会贴在自己的网站上，以便用户自行核对。</p>\n<h2 id=\"SSH免密登陆原理-RSA加密技术\"><a href=\"#SSH免密登陆原理-RSA加密技术\" class=\"headerlink\" title=\"SSH免密登陆原理(RSA加密技术)\"></a>SSH免密登陆原理(RSA加密技术)</h2><p>Step1：SSH密钥配置<br>1.在A上生成密钥对<br>2.将A的公钥拷贝到B上<br>3.在B上将A的公钥写入到授权列表文件authorized_keys中</p>\n<p><img src=\"http://wx4.sinaimg.cn/large/007fPWmPly1fy41o2n2plj30d3097wfo.jpg\" alt=\"\"></p>\n<p>Step2: SSH免密登陆原理（git登陆原理，B相当于git服务器）<br>1.A请求登陆B<br>2.B查看授权列表<br>3.B把A的公钥加密一随机字符串发给A<br>4.A用私钥解密B发送过来的字符串<br>5.A用私钥加密结果发送给B（数字签名）<br>6.B用A的公钥验证A发过来的解密字符串<br>7.验证通过登陆成功</p>\n<p><img src=\"http://wx1.sinaimg.cn/large/007fPWmPly1fy41o2x097j30j608babp.jpg\" alt=\"\"></p>\n<h2 id=\"SSH生成迷密钥对\"><a href=\"#SSH生成迷密钥对\" class=\"headerlink\" title=\"SSH生成迷密钥对\"></a>SSH生成迷密钥对</h2><p><code>ssh-keygen -t rsa -f ~/.ssh/id_rsa.${name} -P &quot;&quot; -q</code></p>\n<p>-t参数：加密方式rsa<br>-f参数：文件名及保存路径 eg： id_rsa.xblin id_rsa.xblin.pub<br>-P参数：提取密钥的密码，默认为无</p>\n<h3 id=\"配置config文件\"><a href=\"#配置config文件\" class=\"headerlink\" title=\"配置config文件\"></a>配置config文件</h3><p><code>~/.ssh/config</code><br>SSH默认读取id_rsa这个私钥<br>修改配置指定路径和名字：</p>\n<p>1.Host          #主机地址<br>2.User          #认证用户<br>3.IdentifyFile  #认证私钥路径 </p>\n<blockquote>\n<p>Tips : Host * 匹配所有的主机</p>\n</blockquote>\n<p>eg：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host icode.baidu.com</span><br><span class=\"line\">User linxubin</span><br><span class=\"line\">IdentityFile ~/.ssh/id_rsa.linxubin</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Important: config文件权限必须是644</p>\n</blockquote>\n<h3 id=\"Shell脚本代码实现\"><a href=\"#Shell脚本代码实现\" class=\"headerlink\" title=\"Shell脚本代码实现\"></a>Shell脚本代码实现</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">usage</span></span>()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">echo</span> </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">ssh_config</span></span>()&#123;</span><br><span class=\"line\">    name=<span class=\"variable\">$1</span></span><br><span class=\"line\">    Remote_Host=<span class=\"variable\">$2</span></span><br><span class=\"line\"></span><br><span class=\"line\">    yum install -y expect</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ ! -f ~/.ssh/id_rsa.<span class=\"variable\">$&#123;name&#125;</span>.pub ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        ssh-keygen -t rsa -f ~/.ssh/id_rsa.<span class=\"variable\">$1</span> -P <span class=\"string\">\"\"</span> -q  <span class=\"comment\">#no passphrase</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"Host *\"</span> &gt;&gt; ~/.ssh/config</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"User <span class=\"variable\">$&#123;name&#125;</span>\"</span> &gt;&gt; ~/.ssh/config</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> <span class=\"string\">\"IdentityFile ~/.ssh/id_rsa.<span class=\"variable\">$&#123;name&#125;</span>\"</span> &gt;&gt; ~/.ssh/config</span><br><span class=\"line\"></span><br><span class=\"line\">        chmod 644 ~/.ssh/config  <span class=\"comment\"># chmod must 644</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ssh root@<span class=\"variable\">$&#123;Remote_Host&#125;</span> <span class=\"string\">\"cat &gt;&gt; /root/.ssh/authorized_keys\"</span> &lt; /root/.ssh/id_rsa.<span class=\"variable\">$&#123;name&#125;</span>.pub</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ssh_config <span class=\"variable\">$1</span> <span class=\"variable\">$2</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Github-ssh配置\"><a href=\"#Github-ssh配置\" class=\"headerlink\" title=\"Github ssh配置\"></a>Github ssh配置</h2><h3 id=\"一-git-clone命令\"><a href=\"#一-git-clone命令\" class=\"headerlink\" title=\"一. git clone命令\"></a>一. git clone命令</h3><p>本地主机clone远程github仓库不需要建立信任关系</p>\n<h3 id=\"二-ssh建立信任关系\"><a href=\"#二-ssh建立信任关系\" class=\"headerlink\" title=\"二. ssh建立信任关系\"></a>二. ssh建立信任关系</h3><p>1.生成密钥对： <code>ssh-keygen -t rsa</code><br>2.gitconfig配置 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name &quot;xxx&quot;   ##github用户名</span><br><span class=\"line\">$ git config --global user.email xxx@example.com  ##github注册邮箱</span><br></pre></td></tr></table></figure>\n<ul>\n<li>/etc/gitconfig 文件：系统中对所有用户都普遍适用的配置。若使用 git config 时用 –system 选项，读写的就是这个文件</li>\n<li>~/.gitconfig 文件：用户目录下的配置文件只适用于该用户。若使用 git config 时用 –global 选项，读写的就是这个文件。</li>\n<li>当前项目的 Git 目录中的配置文件（也就是工作目录中的 .git/config 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 .git/config 里的配置会覆盖 /etc/gitconfig 中的同名变量。</li>\n</ul>\n<p>3.指定生成密钥的名字</p>\n<ul>\n<li>生成密钥对（指定名字） <code>ssh-keygen -t rsa -f ~/.ssh/id_rsa.lxbgithub</code></li>\n<li>配置 ~/.ssh/config 文件</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Host github.com</span><br><span class=\"line\">User xblin</span><br><span class=\"line\">IdentityFile ~/.ssh/id_rsa.lxbgithub</span><br></pre></td></tr></table></figure>\n<hr>\n"},{"date":"2018-11-09T20:58:00.000Z","status":"public","title":"Httpd文件服务器","_content":"\n## 文件服务器搭建方法\n- Httpd(appache2)\n- vsftpd\n- python SimpleHTTPserver\n\n## 搭建Httpd文件服务器\n#### 1.安装\n> Centos: yum install httpd\n> Ubuntu: apt-get install apache2\n\n#### 2.配置\n> centos为例\n\n**查看httpd版本**：`httpd -v`\n**查看httpd配置文件路径：** `httpd -V`\n**配置文件默认目录:** `/ect/httpd/conf/httpd.conf`\n**修改配置文件：**\n1.端口号\n\nListen 80` \n可以改为Listen 8000 或任意符合要求的端口\n\n2.文件存放目录\n\n`DocumentRoot \"/home/xblin\"`\n\n> tips： 目录文件一定要有读的权限，最好放在/home下，否则会出现you don't have permission.\n\n`<Directory \"/home/xblin\">  #这个同上也要改`\n\n**启动Httpd服务：**\n\n```Shell\nservice httpd stop\nservice httpd start\nservice httpd restart\n```\n#### 3.Web查看\n网页登陆链接 http://机器ip：端口\neg： `http://10.32.115.38:8000`\n*第一次登陆会弹出欢迎界面*\n注释  `/ect/httpd/conf.d/welcome.conf` \n*再次登陆就能看到文件列表*\n\n#### 4.文件下载\nwget http://机器ip：端口/文件名\neg： `wget http://10.32.115.38:8000/aa.txt`\n\n## 扩展进阶\n\n- 设置密码登陆\n- 前端界面设计\n","source":"_posts/Linux/Httpd╬─╝■╖■╬ё╞ў.md","raw":"---\ndate: 2018-11-09 20:58\nstatus: public\ntitle: Httpd文件服务器\ncategories: Linux\ntags: Http\n---\n\n## 文件服务器搭建方法\n- Httpd(appache2)\n- vsftpd\n- python SimpleHTTPserver\n\n## 搭建Httpd文件服务器\n#### 1.安装\n> Centos: yum install httpd\n> Ubuntu: apt-get install apache2\n\n#### 2.配置\n> centos为例\n\n**查看httpd版本**：`httpd -v`\n**查看httpd配置文件路径：** `httpd -V`\n**配置文件默认目录:** `/ect/httpd/conf/httpd.conf`\n**修改配置文件：**\n1.端口号\n\nListen 80` \n可以改为Listen 8000 或任意符合要求的端口\n\n2.文件存放目录\n\n`DocumentRoot \"/home/xblin\"`\n\n> tips： 目录文件一定要有读的权限，最好放在/home下，否则会出现you don't have permission.\n\n`<Directory \"/home/xblin\">  #这个同上也要改`\n\n**启动Httpd服务：**\n\n```Shell\nservice httpd stop\nservice httpd start\nservice httpd restart\n```\n#### 3.Web查看\n网页登陆链接 http://机器ip：端口\neg： `http://10.32.115.38:8000`\n*第一次登陆会弹出欢迎界面*\n注释  `/ect/httpd/conf.d/welcome.conf` \n*再次登陆就能看到文件列表*\n\n#### 4.文件下载\nwget http://机器ip：端口/文件名\neg： `wget http://10.32.115.38:8000/aa.txt`\n\n## 扩展进阶\n\n- 设置密码登陆\n- 前端界面设计\n","slug":"Linux/Httpd╬─╝■╖■╬ё╞ў","published":1,"updated":"2018-12-18T03:55:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjptii4fb000jafppwvfnwzl9","content":"<h2 id=\"文件服务器搭建方法\"><a href=\"#文件服务器搭建方法\" class=\"headerlink\" title=\"文件服务器搭建方法\"></a>文件服务器搭建方法</h2><ul>\n<li>Httpd(appache2)</li>\n<li>vsftpd</li>\n<li>python SimpleHTTPserver</li>\n</ul>\n<h2 id=\"搭建Httpd文件服务器\"><a href=\"#搭建Httpd文件服务器\" class=\"headerlink\" title=\"搭建Httpd文件服务器\"></a>搭建Httpd文件服务器</h2><h4 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1.安装\"></a>1.安装</h4><blockquote>\n<p>Centos: yum install httpd<br>Ubuntu: apt-get install apache2</p>\n</blockquote>\n<h4 id=\"2-配置\"><a href=\"#2-配置\" class=\"headerlink\" title=\"2.配置\"></a>2.配置</h4><blockquote>\n<p>centos为例</p>\n</blockquote>\n<p><strong>查看httpd版本</strong>：<code>httpd -v</code><br><strong>查看httpd配置文件路径：</strong> <code>httpd -V</code><br><strong>配置文件默认目录:</strong> <code>/ect/httpd/conf/httpd.conf</code><br><strong>修改配置文件：</strong><br>1.端口号</p>\n<p>Listen 80`<br>可以改为Listen 8000 或任意符合要求的端口</p>\n<p>2.文件存放目录</p>\n<p><code>DocumentRoot &quot;/home/xblin&quot;</code></p>\n<blockquote>\n<p>tips： 目录文件一定要有读的权限，最好放在/home下，否则会出现you don’t have permission.</p>\n</blockquote>\n<p><code>&lt;Directory &quot;/home/xblin&quot;&gt;  #这个同上也要改</code></p>\n<p><strong>启动Httpd服务：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service httpd stop</span><br><span class=\"line\">service httpd start</span><br><span class=\"line\">service httpd restart</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-Web查看\"><a href=\"#3-Web查看\" class=\"headerlink\" title=\"3.Web查看\"></a>3.Web查看</h4><p>网页登陆链接 http://机器ip：端口<br>eg： <code>http://10.32.115.38:8000</code><br><em>第一次登陆会弹出欢迎界面</em><br>注释  <code>/ect/httpd/conf.d/welcome.conf</code><br><em>再次登陆就能看到文件列表</em></p>\n<h4 id=\"4-文件下载\"><a href=\"#4-文件下载\" class=\"headerlink\" title=\"4.文件下载\"></a>4.文件下载</h4><p>wget http://机器ip：端口/文件名<br>eg： <code>wget http://10.32.115.38:8000/aa.txt</code></p>\n<h2 id=\"扩展进阶\"><a href=\"#扩展进阶\" class=\"headerlink\" title=\"扩展进阶\"></a>扩展进阶</h2><ul>\n<li>设置密码登陆</li>\n<li>前端界面设计</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"文件服务器搭建方法\"><a href=\"#文件服务器搭建方法\" class=\"headerlink\" title=\"文件服务器搭建方法\"></a>文件服务器搭建方法</h2><ul>\n<li>Httpd(appache2)</li>\n<li>vsftpd</li>\n<li>python SimpleHTTPserver</li>\n</ul>\n<h2 id=\"搭建Httpd文件服务器\"><a href=\"#搭建Httpd文件服务器\" class=\"headerlink\" title=\"搭建Httpd文件服务器\"></a>搭建Httpd文件服务器</h2><h4 id=\"1-安装\"><a href=\"#1-安装\" class=\"headerlink\" title=\"1.安装\"></a>1.安装</h4><blockquote>\n<p>Centos: yum install httpd<br>Ubuntu: apt-get install apache2</p>\n</blockquote>\n<h4 id=\"2-配置\"><a href=\"#2-配置\" class=\"headerlink\" title=\"2.配置\"></a>2.配置</h4><blockquote>\n<p>centos为例</p>\n</blockquote>\n<p><strong>查看httpd版本</strong>：<code>httpd -v</code><br><strong>查看httpd配置文件路径：</strong> <code>httpd -V</code><br><strong>配置文件默认目录:</strong> <code>/ect/httpd/conf/httpd.conf</code><br><strong>修改配置文件：</strong><br>1.端口号</p>\n<p>Listen 80`<br>可以改为Listen 8000 或任意符合要求的端口</p>\n<p>2.文件存放目录</p>\n<p><code>DocumentRoot &quot;/home/xblin&quot;</code></p>\n<blockquote>\n<p>tips： 目录文件一定要有读的权限，最好放在/home下，否则会出现you don’t have permission.</p>\n</blockquote>\n<p><code>&lt;Directory &quot;/home/xblin&quot;&gt;  #这个同上也要改</code></p>\n<p><strong>启动Httpd服务：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service httpd stop</span><br><span class=\"line\">service httpd start</span><br><span class=\"line\">service httpd restart</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-Web查看\"><a href=\"#3-Web查看\" class=\"headerlink\" title=\"3.Web查看\"></a>3.Web查看</h4><p>网页登陆链接 http://机器ip：端口<br>eg： <code>http://10.32.115.38:8000</code><br><em>第一次登陆会弹出欢迎界面</em><br>注释  <code>/ect/httpd/conf.d/welcome.conf</code><br><em>再次登陆就能看到文件列表</em></p>\n<h4 id=\"4-文件下载\"><a href=\"#4-文件下载\" class=\"headerlink\" title=\"4.文件下载\"></a>4.文件下载</h4><p>wget http://机器ip：端口/文件名<br>eg： <code>wget http://10.32.115.38:8000/aa.txt</code></p>\n<h2 id=\"扩展进阶\"><a href=\"#扩展进阶\" class=\"headerlink\" title=\"扩展进阶\"></a>扩展进阶</h2><ul>\n<li>设置密码登陆</li>\n<li>前端界面设计</li>\n</ul>\n"},{"date":"2018-12-10T16:56:00.000Z","status":"public","title":"Kubernetes","_content":"\n## Kubernetes\n\n下载kubernetes client或kubernetes server\nurl：` https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.11.md#server-binaries `\n\n\n用途： 容器的编排\n\nK8s集群架构\n![k8s](http://wx4.sinaimg.cn/large/007fPWmPly1fy41o16pa1j30jm0br0t9.jpg)\n\n\n#### Master Node\nMaster 提供集群的管理控制中心，调度，控制集群的资源，包含：\n- API Server： 任何的资源请求/调用操作都是通过 Kube-apiserver 提供的接口进行\n- Controller： 运行管理控制器，它们是集群中处理常规任务的后台线程。\n- Schedule：调度Node的Pod，为Pod选择一个Node。优先级队列的选择\n\n#### Node： 运行容器，运行服务的节点\nKubelet：是主要的节点代理，它会监视已分配给节点的pod，具体功能：\n- 安装Pod所需的volume。\n- 下载Pod的Secrets。\n- Pod中运行的 docker（或experimentally，rkt）容器。\n- 定期执行容器健康检查。\n等等...\n\n\n#### 部署Deployment和 副本集Replicaset\n\n![k8s1](http://wx4.sinaimg.cn/large/007fPWmPly1fy41o1fdfhj30bc0ai3ys.jpg)\n\n- Deployment部署应用：让应用程序在集群上运行：\n\n1. 包含Replica Set\n2. 包含版本信息用于升级/回滚\n\n- Replicaset副本集，创建Pod的多个副本集，可扩容/缩容，实现负载均衡。\n\n\n#### Service\n**服务Service**：\n- 提供外界访问的接口，关联一组Pod， 可以用kubectl get services 命令查看应用被映射到节点的哪个端口，eg 8080:30253\n- Service是Pods的逻辑抽象，体现对一个虚拟IP和端口，可供外部访问\n\n**Service的几种类型**\n- ClusterIP：会创建k8s cluster内可以访问的cluster ip，集群内调用者可通过该IP访问该服务\n- NodePort：可以通过该cluster的任意一个node的外部IP来访问，NodePort的端口范围为30000-32767\n- LoadBalancer：会调用iaas的服务创建load balancer的VIP，集群外调用者可通过此外IP访问\n\n\n#### Namespace\n在一个名字空间内，资源的名字必须保证unique，但是不同名字空间内，可以相同\n- 创建namespace`kubectl create namespace [名字] `\n- 删除namespce `kubectl delete namespaces [名字]` \n\n> Tips: 删除namespcace后，改namespace对应的所有集群资源都删除了。\n\n#### Label \n一对 key/value， 被关联到对象上例如pod（一个对象可以有多个label）\nservice 是通过label关联Deployment的 （在yaml file里）\n![k8s2](http://wx4.sinaimg.cn/large/007fPWmPly1fy41o1rh1pj30nk0bkdiw.jpg) \n\n\n#### Kubectl常用命令\n```sh\n$ kubectl version\n$ kubectl help\n$ kubectl cluster-info\n$ kubectl create namespace [名字]\n$ kubectl get nodes --namespace=[名字]\n$ kubectl get pods\n$ kubectl get deployments\n$ kubectl get services\n$ kubectl delete namespaces [名字]\n$ kubectl describe xxx #查看pod或node细节\n$ kubectl logs xxx #查看日志文件\n```\n\n#### kubectl demo\n```sh\n$ kubectl create namespace [名字]  #创建namespace\n$ kubectl run kubernetes-bootcamp --image=hub.baidubce.com/xxx/mynode:1.0.0 --port=8080 --namespace=[名字]  #配置pod并运行\n$ kubectl get pods --namespace=xxx  #查看运行的pod\n$ kubectl describe pods/[pod name] --namespace=xxx #查看pod详细配置\n$ $kubectl expose deployment/kubernetes-bootcamp --type=\"NodePort\" --port 8080 --namespace=[名字]  #service的配置\n$curl $VM_IP:$NODE_PORT  #运行pod中的程序\n```\n\n> k8s 扩容/缩容， 版本更新， 小流量， A/B测试 demo 参考ppt\n\n#### 使用yaml file\n运行yaml文件： `kubectl create -f xxx.yaml`\n\nnamespace yaml文件：\n```yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: linxubin\n```\n\nDeployment yaml文件:\n```yaml\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: kubernetes-bootcamp\n  namespace: linxubin\nspec:\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        app: linode\n        track: stable\n        version: 1.0.0\n    spec:\n      containers:\n        - name: linxubin\n          image: \"hub.baidubce.com/bootcamp_6/linode:1.0.0\"\n          ports:\n            - name: http\n              containerPort: 8080\n```\n\nService的yaml文件：\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: linxubin\n  labels:\n    app: linode\nspec:\n  ports:\n  - port: 8080\n    targetPort: 8080\n  type: NodePort\n  selector:\n    app: linode   #对应Deployment的label\n```\n\n\n\n","source":"_posts/Linux/Kubernetes.md","raw":"---\ndate: 2018-12-10 16:56\nstatus: public\ntitle: Kubernetes\ncategories: Linux\ntags: K8s\n---\n\n## Kubernetes\n\n下载kubernetes client或kubernetes server\nurl：` https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.11.md#server-binaries `\n\n\n用途： 容器的编排\n\nK8s集群架构\n![k8s](http://wx4.sinaimg.cn/large/007fPWmPly1fy41o16pa1j30jm0br0t9.jpg)\n\n\n#### Master Node\nMaster 提供集群的管理控制中心，调度，控制集群的资源，包含：\n- API Server： 任何的资源请求/调用操作都是通过 Kube-apiserver 提供的接口进行\n- Controller： 运行管理控制器，它们是集群中处理常规任务的后台线程。\n- Schedule：调度Node的Pod，为Pod选择一个Node。优先级队列的选择\n\n#### Node： 运行容器，运行服务的节点\nKubelet：是主要的节点代理，它会监视已分配给节点的pod，具体功能：\n- 安装Pod所需的volume。\n- 下载Pod的Secrets。\n- Pod中运行的 docker（或experimentally，rkt）容器。\n- 定期执行容器健康检查。\n等等...\n\n\n#### 部署Deployment和 副本集Replicaset\n\n![k8s1](http://wx4.sinaimg.cn/large/007fPWmPly1fy41o1fdfhj30bc0ai3ys.jpg)\n\n- Deployment部署应用：让应用程序在集群上运行：\n\n1. 包含Replica Set\n2. 包含版本信息用于升级/回滚\n\n- Replicaset副本集，创建Pod的多个副本集，可扩容/缩容，实现负载均衡。\n\n\n#### Service\n**服务Service**：\n- 提供外界访问的接口，关联一组Pod， 可以用kubectl get services 命令查看应用被映射到节点的哪个端口，eg 8080:30253\n- Service是Pods的逻辑抽象，体现对一个虚拟IP和端口，可供外部访问\n\n**Service的几种类型**\n- ClusterIP：会创建k8s cluster内可以访问的cluster ip，集群内调用者可通过该IP访问该服务\n- NodePort：可以通过该cluster的任意一个node的外部IP来访问，NodePort的端口范围为30000-32767\n- LoadBalancer：会调用iaas的服务创建load balancer的VIP，集群外调用者可通过此外IP访问\n\n\n#### Namespace\n在一个名字空间内，资源的名字必须保证unique，但是不同名字空间内，可以相同\n- 创建namespace`kubectl create namespace [名字] `\n- 删除namespce `kubectl delete namespaces [名字]` \n\n> Tips: 删除namespcace后，改namespace对应的所有集群资源都删除了。\n\n#### Label \n一对 key/value， 被关联到对象上例如pod（一个对象可以有多个label）\nservice 是通过label关联Deployment的 （在yaml file里）\n![k8s2](http://wx4.sinaimg.cn/large/007fPWmPly1fy41o1rh1pj30nk0bkdiw.jpg) \n\n\n#### Kubectl常用命令\n```sh\n$ kubectl version\n$ kubectl help\n$ kubectl cluster-info\n$ kubectl create namespace [名字]\n$ kubectl get nodes --namespace=[名字]\n$ kubectl get pods\n$ kubectl get deployments\n$ kubectl get services\n$ kubectl delete namespaces [名字]\n$ kubectl describe xxx #查看pod或node细节\n$ kubectl logs xxx #查看日志文件\n```\n\n#### kubectl demo\n```sh\n$ kubectl create namespace [名字]  #创建namespace\n$ kubectl run kubernetes-bootcamp --image=hub.baidubce.com/xxx/mynode:1.0.0 --port=8080 --namespace=[名字]  #配置pod并运行\n$ kubectl get pods --namespace=xxx  #查看运行的pod\n$ kubectl describe pods/[pod name] --namespace=xxx #查看pod详细配置\n$ $kubectl expose deployment/kubernetes-bootcamp --type=\"NodePort\" --port 8080 --namespace=[名字]  #service的配置\n$curl $VM_IP:$NODE_PORT  #运行pod中的程序\n```\n\n> k8s 扩容/缩容， 版本更新， 小流量， A/B测试 demo 参考ppt\n\n#### 使用yaml file\n运行yaml文件： `kubectl create -f xxx.yaml`\n\nnamespace yaml文件：\n```yaml\napiVersion: v1\nkind: Namespace\nmetadata:\n  name: linxubin\n```\n\nDeployment yaml文件:\n```yaml\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: kubernetes-bootcamp\n  namespace: linxubin\nspec:\n  replicas: 3\n  template:\n    metadata:\n      labels:\n        app: linode\n        track: stable\n        version: 1.0.0\n    spec:\n      containers:\n        - name: linxubin\n          image: \"hub.baidubce.com/bootcamp_6/linode:1.0.0\"\n          ports:\n            - name: http\n              containerPort: 8080\n```\n\nService的yaml文件：\n```yaml\napiVersion: v1\nkind: Service\nmetadata:\n  name: linxubin\n  labels:\n    app: linode\nspec:\n  ports:\n  - port: 8080\n    targetPort: 8080\n  type: NodePort\n  selector:\n    app: linode   #对应Deployment的label\n```\n\n\n\n","slug":"Linux/Kubernetes","published":1,"updated":"2018-12-18T03:55:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjptii4fg000mafppo68w3qtt","content":"<h2 id=\"Kubernetes\"><a href=\"#Kubernetes\" class=\"headerlink\" title=\"Kubernetes\"></a>Kubernetes</h2><p>下载kubernetes client或kubernetes server<br>url：<code>https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.11.md#server-binaries</code></p>\n<p>用途： 容器的编排</p>\n<p>K8s集群架构<br><img src=\"http://wx4.sinaimg.cn/large/007fPWmPly1fy41o16pa1j30jm0br0t9.jpg\" alt=\"k8s\"></p>\n<h4 id=\"Master-Node\"><a href=\"#Master-Node\" class=\"headerlink\" title=\"Master Node\"></a>Master Node</h4><p>Master 提供集群的管理控制中心，调度，控制集群的资源，包含：</p>\n<ul>\n<li>API Server： 任何的资源请求/调用操作都是通过 Kube-apiserver 提供的接口进行</li>\n<li>Controller： 运行管理控制器，它们是集群中处理常规任务的后台线程。</li>\n<li>Schedule：调度Node的Pod，为Pod选择一个Node。优先级队列的选择</li>\n</ul>\n<h4 id=\"Node：-运行容器，运行服务的节点\"><a href=\"#Node：-运行容器，运行服务的节点\" class=\"headerlink\" title=\"Node： 运行容器，运行服务的节点\"></a>Node： 运行容器，运行服务的节点</h4><p>Kubelet：是主要的节点代理，它会监视已分配给节点的pod，具体功能：</p>\n<ul>\n<li>安装Pod所需的volume。</li>\n<li>下载Pod的Secrets。</li>\n<li>Pod中运行的 docker（或experimentally，rkt）容器。</li>\n<li>定期执行容器健康检查。<br>等等…</li>\n</ul>\n<h4 id=\"部署Deployment和-副本集Replicaset\"><a href=\"#部署Deployment和-副本集Replicaset\" class=\"headerlink\" title=\"部署Deployment和 副本集Replicaset\"></a>部署Deployment和 副本集Replicaset</h4><p><img src=\"http://wx4.sinaimg.cn/large/007fPWmPly1fy41o1fdfhj30bc0ai3ys.jpg\" alt=\"k8s1\"></p>\n<ul>\n<li>Deployment部署应用：让应用程序在集群上运行：</li>\n</ul>\n<ol>\n<li>包含Replica Set</li>\n<li>包含版本信息用于升级/回滚</li>\n</ol>\n<ul>\n<li>Replicaset副本集，创建Pod的多个副本集，可扩容/缩容，实现负载均衡。</li>\n</ul>\n<h4 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h4><p><strong>服务Service</strong>：</p>\n<ul>\n<li>提供外界访问的接口，关联一组Pod， 可以用kubectl get services 命令查看应用被映射到节点的哪个端口，eg 8080:30253</li>\n<li>Service是Pods的逻辑抽象，体现对一个虚拟IP和端口，可供外部访问</li>\n</ul>\n<p><strong>Service的几种类型</strong></p>\n<ul>\n<li>ClusterIP：会创建k8s cluster内可以访问的cluster ip，集群内调用者可通过该IP访问该服务</li>\n<li>NodePort：可以通过该cluster的任意一个node的外部IP来访问，NodePort的端口范围为30000-32767</li>\n<li>LoadBalancer：会调用iaas的服务创建load balancer的VIP，集群外调用者可通过此外IP访问</li>\n</ul>\n<h4 id=\"Namespace\"><a href=\"#Namespace\" class=\"headerlink\" title=\"Namespace\"></a>Namespace</h4><p>在一个名字空间内，资源的名字必须保证unique，但是不同名字空间内，可以相同</p>\n<ul>\n<li>创建namespace<code>kubectl create namespace [名字]</code></li>\n<li>删除namespce <code>kubectl delete namespaces [名字]</code> </li>\n</ul>\n<blockquote>\n<p>Tips: 删除namespcace后，改namespace对应的所有集群资源都删除了。</p>\n</blockquote>\n<h4 id=\"Label\"><a href=\"#Label\" class=\"headerlink\" title=\"Label\"></a>Label</h4><p>一对 key/value， 被关联到对象上例如pod（一个对象可以有多个label）<br>service 是通过label关联Deployment的 （在yaml file里）<br><img src=\"http://wx4.sinaimg.cn/large/007fPWmPly1fy41o1rh1pj30nk0bkdiw.jpg\" alt=\"k8s2\"> </p>\n<h4 id=\"Kubectl常用命令\"><a href=\"#Kubectl常用命令\" class=\"headerlink\" title=\"Kubectl常用命令\"></a>Kubectl常用命令</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl version</span><br><span class=\"line\">$ kubectl <span class=\"built_in\">help</span></span><br><span class=\"line\">$ kubectl cluster-info</span><br><span class=\"line\">$ kubectl create namespace [名字]</span><br><span class=\"line\">$ kubectl get nodes --namespace=[名字]</span><br><span class=\"line\">$ kubectl get pods</span><br><span class=\"line\">$ kubectl get deployments</span><br><span class=\"line\">$ kubectl get services</span><br><span class=\"line\">$ kubectl delete namespaces [名字]</span><br><span class=\"line\">$ kubectl describe xxx <span class=\"comment\">#查看pod或node细节</span></span><br><span class=\"line\">$ kubectl logs xxx <span class=\"comment\">#查看日志文件</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"kubectl-demo\"><a href=\"#kubectl-demo\" class=\"headerlink\" title=\"kubectl demo\"></a>kubectl demo</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl create namespace [名字]  <span class=\"comment\">#创建namespace</span></span><br><span class=\"line\">$ kubectl run kubernetes-bootcamp --image=hub.baidubce.com/xxx/mynode:1.0.0 --port=8080 --namespace=[名字]  <span class=\"comment\">#配置pod并运行</span></span><br><span class=\"line\">$ kubectl get pods --namespace=xxx  <span class=\"comment\">#查看运行的pod</span></span><br><span class=\"line\">$ kubectl describe pods/[pod name] --namespace=xxx <span class=\"comment\">#查看pod详细配置</span></span><br><span class=\"line\">$ <span class=\"variable\">$kubectl</span> expose deployment/kubernetes-bootcamp --<span class=\"built_in\">type</span>=<span class=\"string\">\"NodePort\"</span> --port 8080 --namespace=[名字]  <span class=\"comment\">#service的配置</span></span><br><span class=\"line\"><span class=\"variable\">$curl</span> <span class=\"variable\">$VM_IP</span>:<span class=\"variable\">$NODE_PORT</span>  <span class=\"comment\">#运行pod中的程序</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>k8s 扩容/缩容， 版本更新， 小流量， A/B测试 demo 参考ppt</p>\n</blockquote>\n<h4 id=\"使用yaml-file\"><a href=\"#使用yaml-file\" class=\"headerlink\" title=\"使用yaml file\"></a>使用yaml file</h4><p>运行yaml文件： <code>kubectl create -f xxx.yaml</code></p>\n<p>namespace yaml文件：<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Namespace</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"><span class=\"attr\">  name:</span> <span class=\"string\">linxubin</span></span><br></pre></td></tr></table></figure></p>\n<p>Deployment yaml文件:<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"><span class=\"attr\">  name:</span> <span class=\"string\">kubernetes-bootcamp</span></span><br><span class=\"line\"><span class=\"attr\">  namespace:</span> <span class=\"string\">linxubin</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\"><span class=\"attr\">  replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"attr\">  template:</span></span><br><span class=\"line\"><span class=\"attr\">    metadata:</span></span><br><span class=\"line\"><span class=\"attr\">      labels:</span></span><br><span class=\"line\"><span class=\"attr\">        app:</span> <span class=\"string\">linode</span></span><br><span class=\"line\"><span class=\"attr\">        track:</span> <span class=\"string\">stable</span></span><br><span class=\"line\"><span class=\"attr\">        version:</span> <span class=\"number\">1.0</span><span class=\"number\">.0</span></span><br><span class=\"line\"><span class=\"attr\">    spec:</span></span><br><span class=\"line\"><span class=\"attr\">      containers:</span></span><br><span class=\"line\"><span class=\"attr\">        - name:</span> <span class=\"string\">linxubin</span></span><br><span class=\"line\"><span class=\"attr\">          image:</span> <span class=\"string\">\"hub.baidubce.com/bootcamp_6/linode:1.0.0\"</span></span><br><span class=\"line\"><span class=\"attr\">          ports:</span></span><br><span class=\"line\"><span class=\"attr\">            - name:</span> <span class=\"string\">http</span></span><br><span class=\"line\"><span class=\"attr\">              containerPort:</span> <span class=\"number\">8080</span></span><br></pre></td></tr></table></figure></p>\n<p>Service的yaml文件：<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"><span class=\"attr\">  name:</span> <span class=\"string\">linxubin</span></span><br><span class=\"line\"><span class=\"attr\">  labels:</span></span><br><span class=\"line\"><span class=\"attr\">    app:</span> <span class=\"string\">linode</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\"><span class=\"attr\">  ports:</span></span><br><span class=\"line\"><span class=\"attr\">  - port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"attr\">    targetPort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"attr\">  type:</span> <span class=\"string\">NodePort</span></span><br><span class=\"line\"><span class=\"attr\">  selector:</span></span><br><span class=\"line\"><span class=\"attr\">    app:</span> <span class=\"string\">linode</span>   <span class=\"comment\">#对应Deployment的label</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Kubernetes\"><a href=\"#Kubernetes\" class=\"headerlink\" title=\"Kubernetes\"></a>Kubernetes</h2><p>下载kubernetes client或kubernetes server<br>url：<code>https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.11.md#server-binaries</code></p>\n<p>用途： 容器的编排</p>\n<p>K8s集群架构<br><img src=\"http://wx4.sinaimg.cn/large/007fPWmPly1fy41o16pa1j30jm0br0t9.jpg\" alt=\"k8s\"></p>\n<h4 id=\"Master-Node\"><a href=\"#Master-Node\" class=\"headerlink\" title=\"Master Node\"></a>Master Node</h4><p>Master 提供集群的管理控制中心，调度，控制集群的资源，包含：</p>\n<ul>\n<li>API Server： 任何的资源请求/调用操作都是通过 Kube-apiserver 提供的接口进行</li>\n<li>Controller： 运行管理控制器，它们是集群中处理常规任务的后台线程。</li>\n<li>Schedule：调度Node的Pod，为Pod选择一个Node。优先级队列的选择</li>\n</ul>\n<h4 id=\"Node：-运行容器，运行服务的节点\"><a href=\"#Node：-运行容器，运行服务的节点\" class=\"headerlink\" title=\"Node： 运行容器，运行服务的节点\"></a>Node： 运行容器，运行服务的节点</h4><p>Kubelet：是主要的节点代理，它会监视已分配给节点的pod，具体功能：</p>\n<ul>\n<li>安装Pod所需的volume。</li>\n<li>下载Pod的Secrets。</li>\n<li>Pod中运行的 docker（或experimentally，rkt）容器。</li>\n<li>定期执行容器健康检查。<br>等等…</li>\n</ul>\n<h4 id=\"部署Deployment和-副本集Replicaset\"><a href=\"#部署Deployment和-副本集Replicaset\" class=\"headerlink\" title=\"部署Deployment和 副本集Replicaset\"></a>部署Deployment和 副本集Replicaset</h4><p><img src=\"http://wx4.sinaimg.cn/large/007fPWmPly1fy41o1fdfhj30bc0ai3ys.jpg\" alt=\"k8s1\"></p>\n<ul>\n<li>Deployment部署应用：让应用程序在集群上运行：</li>\n</ul>\n<ol>\n<li>包含Replica Set</li>\n<li>包含版本信息用于升级/回滚</li>\n</ol>\n<ul>\n<li>Replicaset副本集，创建Pod的多个副本集，可扩容/缩容，实现负载均衡。</li>\n</ul>\n<h4 id=\"Service\"><a href=\"#Service\" class=\"headerlink\" title=\"Service\"></a>Service</h4><p><strong>服务Service</strong>：</p>\n<ul>\n<li>提供外界访问的接口，关联一组Pod， 可以用kubectl get services 命令查看应用被映射到节点的哪个端口，eg 8080:30253</li>\n<li>Service是Pods的逻辑抽象，体现对一个虚拟IP和端口，可供外部访问</li>\n</ul>\n<p><strong>Service的几种类型</strong></p>\n<ul>\n<li>ClusterIP：会创建k8s cluster内可以访问的cluster ip，集群内调用者可通过该IP访问该服务</li>\n<li>NodePort：可以通过该cluster的任意一个node的外部IP来访问，NodePort的端口范围为30000-32767</li>\n<li>LoadBalancer：会调用iaas的服务创建load balancer的VIP，集群外调用者可通过此外IP访问</li>\n</ul>\n<h4 id=\"Namespace\"><a href=\"#Namespace\" class=\"headerlink\" title=\"Namespace\"></a>Namespace</h4><p>在一个名字空间内，资源的名字必须保证unique，但是不同名字空间内，可以相同</p>\n<ul>\n<li>创建namespace<code>kubectl create namespace [名字]</code></li>\n<li>删除namespce <code>kubectl delete namespaces [名字]</code> </li>\n</ul>\n<blockquote>\n<p>Tips: 删除namespcace后，改namespace对应的所有集群资源都删除了。</p>\n</blockquote>\n<h4 id=\"Label\"><a href=\"#Label\" class=\"headerlink\" title=\"Label\"></a>Label</h4><p>一对 key/value， 被关联到对象上例如pod（一个对象可以有多个label）<br>service 是通过label关联Deployment的 （在yaml file里）<br><img src=\"http://wx4.sinaimg.cn/large/007fPWmPly1fy41o1rh1pj30nk0bkdiw.jpg\" alt=\"k8s2\"> </p>\n<h4 id=\"Kubectl常用命令\"><a href=\"#Kubectl常用命令\" class=\"headerlink\" title=\"Kubectl常用命令\"></a>Kubectl常用命令</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl version</span><br><span class=\"line\">$ kubectl <span class=\"built_in\">help</span></span><br><span class=\"line\">$ kubectl cluster-info</span><br><span class=\"line\">$ kubectl create namespace [名字]</span><br><span class=\"line\">$ kubectl get nodes --namespace=[名字]</span><br><span class=\"line\">$ kubectl get pods</span><br><span class=\"line\">$ kubectl get deployments</span><br><span class=\"line\">$ kubectl get services</span><br><span class=\"line\">$ kubectl delete namespaces [名字]</span><br><span class=\"line\">$ kubectl describe xxx <span class=\"comment\">#查看pod或node细节</span></span><br><span class=\"line\">$ kubectl logs xxx <span class=\"comment\">#查看日志文件</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"kubectl-demo\"><a href=\"#kubectl-demo\" class=\"headerlink\" title=\"kubectl demo\"></a>kubectl demo</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl create namespace [名字]  <span class=\"comment\">#创建namespace</span></span><br><span class=\"line\">$ kubectl run kubernetes-bootcamp --image=hub.baidubce.com/xxx/mynode:1.0.0 --port=8080 --namespace=[名字]  <span class=\"comment\">#配置pod并运行</span></span><br><span class=\"line\">$ kubectl get pods --namespace=xxx  <span class=\"comment\">#查看运行的pod</span></span><br><span class=\"line\">$ kubectl describe pods/[pod name] --namespace=xxx <span class=\"comment\">#查看pod详细配置</span></span><br><span class=\"line\">$ <span class=\"variable\">$kubectl</span> expose deployment/kubernetes-bootcamp --<span class=\"built_in\">type</span>=<span class=\"string\">\"NodePort\"</span> --port 8080 --namespace=[名字]  <span class=\"comment\">#service的配置</span></span><br><span class=\"line\"><span class=\"variable\">$curl</span> <span class=\"variable\">$VM_IP</span>:<span class=\"variable\">$NODE_PORT</span>  <span class=\"comment\">#运行pod中的程序</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>k8s 扩容/缩容， 版本更新， 小流量， A/B测试 demo 参考ppt</p>\n</blockquote>\n<h4 id=\"使用yaml-file\"><a href=\"#使用yaml-file\" class=\"headerlink\" title=\"使用yaml file\"></a>使用yaml file</h4><p>运行yaml文件： <code>kubectl create -f xxx.yaml</code></p>\n<p>namespace yaml文件：<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Namespace</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"><span class=\"attr\">  name:</span> <span class=\"string\">linxubin</span></span><br></pre></td></tr></table></figure></p>\n<p>Deployment yaml文件:<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">extensions/v1beta1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"><span class=\"attr\">  name:</span> <span class=\"string\">kubernetes-bootcamp</span></span><br><span class=\"line\"><span class=\"attr\">  namespace:</span> <span class=\"string\">linxubin</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\"><span class=\"attr\">  replicas:</span> <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"attr\">  template:</span></span><br><span class=\"line\"><span class=\"attr\">    metadata:</span></span><br><span class=\"line\"><span class=\"attr\">      labels:</span></span><br><span class=\"line\"><span class=\"attr\">        app:</span> <span class=\"string\">linode</span></span><br><span class=\"line\"><span class=\"attr\">        track:</span> <span class=\"string\">stable</span></span><br><span class=\"line\"><span class=\"attr\">        version:</span> <span class=\"number\">1.0</span><span class=\"number\">.0</span></span><br><span class=\"line\"><span class=\"attr\">    spec:</span></span><br><span class=\"line\"><span class=\"attr\">      containers:</span></span><br><span class=\"line\"><span class=\"attr\">        - name:</span> <span class=\"string\">linxubin</span></span><br><span class=\"line\"><span class=\"attr\">          image:</span> <span class=\"string\">\"hub.baidubce.com/bootcamp_6/linode:1.0.0\"</span></span><br><span class=\"line\"><span class=\"attr\">          ports:</span></span><br><span class=\"line\"><span class=\"attr\">            - name:</span> <span class=\"string\">http</span></span><br><span class=\"line\"><span class=\"attr\">              containerPort:</span> <span class=\"number\">8080</span></span><br></pre></td></tr></table></figure></p>\n<p>Service的yaml文件：<br><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\"><span class=\"attr\">  name:</span> <span class=\"string\">linxubin</span></span><br><span class=\"line\"><span class=\"attr\">  labels:</span></span><br><span class=\"line\"><span class=\"attr\">    app:</span> <span class=\"string\">linode</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\"><span class=\"attr\">  ports:</span></span><br><span class=\"line\"><span class=\"attr\">  - port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"attr\">    targetPort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\"><span class=\"attr\">  type:</span> <span class=\"string\">NodePort</span></span><br><span class=\"line\"><span class=\"attr\">  selector:</span></span><br><span class=\"line\"><span class=\"attr\">    app:</span> <span class=\"string\">linode</span>   <span class=\"comment\">#对应Deployment的label</span></span><br></pre></td></tr></table></figure></p>\n"},{"date":"2018-10-29T11:58:00.000Z","status":"public","title":"Linux常用命令","_content":"\n1.rz -be ; sz \n2.scp \n3.head ;  tail\n4.alias\n5.esc+.\n6.ctrl-R\n7.top\n\n","source":"_posts/Linux/Linux│г╙├├№┴ю.md","raw":"---\ndate: 2018-10-29 11:58\nstatus: public\ntitle: Linux常用命令\ncategories: Linux\ntags: Linux\n---\n\n1.rz -be ; sz \n2.scp \n3.head ;  tail\n4.alias\n5.esc+.\n6.ctrl-R\n7.top\n\n","slug":"Linux/Linux│г╙├├№┴ю","published":1,"updated":"2018-12-18T03:55:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjptii4fy000rafppicfv0sdd","content":"<p>1.rz -be ; sz<br>2.scp<br>3.head ;  tail<br>4.alias<br>5.esc+.<br>6.ctrl-R<br>7.top</p>\n","site":{"data":{}},"excerpt":"","more":"<p>1.rz -be ; sz<br>2.scp<br>3.head ;  tail<br>4.alias<br>5.esc+.<br>6.ctrl-R<br>7.top</p>\n"},{"date":"2018-10-29T17:30:00.000Z","status":"public","title":"Markdown笔记","_content":"\n　　　　　　　　　　　　　　　　　　　　　Written by xblin\n\n![logo](http://wx4.sinaimg.cn/large/007fPWmPly1fy41o22i1gj3074074q3p.jpg)\n## 标题\n\n```\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题 \n```\n>注：# 和「一级标题」之间建议保留一个字符的空格，这是最标准的 Markdown 写法\n\n## 代码注释\n#### 1.单行注释\n`code `\n#### 2.多行注释\n\n``` C++\n#include <iostream>\nint main(void){\n    count <<\"hello world!\"<<endl;\n}\n```\n\n## 列表\n#### 1.无序列表\n```\n- 文本1\n- 文本2\n- 文本3\n```\noutput：\n- 文本1\n- 文本2\n- 文本3\n\n#### 2.有序列表\n```\n1. 文本1\n2. 文本2\n3. 文本3\n```\n\n## 表格\n```\n标题1 | 标题2 | 标题3 |\n----- | :---- | ----: |\nlab1  | lab2  | lab3  |\n\n注：    :---- 为左对齐 ， ----:为右对齐\n```\noutput:\n\n标题1 | 标题2 | 标题3 |\n----- | :---- | ----: \nlab1  | lab2  | lab3  \n\n\n## 下划线\n```\n----\n```\noutput:\n\n----\n\n\n## 空格和换行\n####空格\n1.按shift + space 切换为全角模式，输入空格就有效\n2.\n```\n&bsp; aa\n```\n### 换行 \n```\n<br/>\n下行文本\n```\noutput:\n<br>\naa\n\n----\n","source":"_posts/Linux/Markdown▒╩╝╟.md","raw":"---\ndate: 2018-10-29 17:30\nstatus: public\ntitle: Markdown笔记\ncategories: Linux\ntags: Markdown\n---\n\n　　　　　　　　　　　　　　　　　　　　　Written by xblin\n\n![logo](http://wx4.sinaimg.cn/large/007fPWmPly1fy41o22i1gj3074074q3p.jpg)\n## 标题\n\n```\n# 一级标题\n## 二级标题\n### 三级标题\n#### 四级标题\n##### 五级标题\n###### 六级标题 \n```\n>注：# 和「一级标题」之间建议保留一个字符的空格，这是最标准的 Markdown 写法\n\n## 代码注释\n#### 1.单行注释\n`code `\n#### 2.多行注释\n\n``` C++\n#include <iostream>\nint main(void){\n    count <<\"hello world!\"<<endl;\n}\n```\n\n## 列表\n#### 1.无序列表\n```\n- 文本1\n- 文本2\n- 文本3\n```\noutput：\n- 文本1\n- 文本2\n- 文本3\n\n#### 2.有序列表\n```\n1. 文本1\n2. 文本2\n3. 文本3\n```\n\n## 表格\n```\n标题1 | 标题2 | 标题3 |\n----- | :---- | ----: |\nlab1  | lab2  | lab3  |\n\n注：    :---- 为左对齐 ， ----:为右对齐\n```\noutput:\n\n标题1 | 标题2 | 标题3 |\n----- | :---- | ----: \nlab1  | lab2  | lab3  \n\n\n## 下划线\n```\n----\n```\noutput:\n\n----\n\n\n## 空格和换行\n####空格\n1.按shift + space 切换为全角模式，输入空格就有效\n2.\n```\n&bsp; aa\n```\n### 换行 \n```\n<br/>\n下行文本\n```\noutput:\n<br>\naa\n\n----\n","slug":"Linux/Markdown▒╩╝╟","published":1,"updated":"2018-12-18T03:55:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjptii4g1000uafpp15kaoxme","content":"<p>　　　　　　　　　　　　　　　　　　　　　Written by xblin</p>\n<p><img src=\"http://wx4.sinaimg.cn/large/007fPWmPly1fy41o22i1gj3074074q3p.jpg\" alt=\"logo\"></p>\n<h2 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 一级标题</span><br><span class=\"line\">## 二级标题</span><br><span class=\"line\">### 三级标题</span><br><span class=\"line\">#### 四级标题</span><br><span class=\"line\">##### 五级标题</span><br><span class=\"line\">###### 六级标题</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：# 和「一级标题」之间建议保留一个字符的空格，这是最标准的 Markdown 写法</p>\n</blockquote>\n<h2 id=\"代码注释\"><a href=\"#代码注释\" class=\"headerlink\" title=\"代码注释\"></a>代码注释</h2><h4 id=\"1-单行注释\"><a href=\"#1-单行注释\" class=\"headerlink\" title=\"1.单行注释\"></a>1.单行注释</h4><p><code>code</code></p>\n<h4 id=\"2-多行注释\"><a href=\"#2-多行注释\" class=\"headerlink\" title=\"2.多行注释\"></a>2.多行注释</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>&#123;</span><br><span class=\"line\">    count &lt;&lt;<span class=\"string\">\"hello world!\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><h4 id=\"1-无序列表\"><a href=\"#1-无序列表\" class=\"headerlink\" title=\"1.无序列表\"></a>1.无序列表</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 文本1</span><br><span class=\"line\">- 文本2</span><br><span class=\"line\">- 文本3</span><br></pre></td></tr></table></figure>\n<p>output：</p>\n<ul>\n<li>文本1</li>\n<li>文本2</li>\n<li>文本3</li>\n</ul>\n<h4 id=\"2-有序列表\"><a href=\"#2-有序列表\" class=\"headerlink\" title=\"2.有序列表\"></a>2.有序列表</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 文本1</span><br><span class=\"line\">2. 文本2</span><br><span class=\"line\">3. 文本3</span><br></pre></td></tr></table></figure>\n<h2 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">标题1 | 标题2 | 标题3 |</span><br><span class=\"line\">----- | :---- | ----: |</span><br><span class=\"line\">lab1  | lab2  | lab3  |</span><br><span class=\"line\"></span><br><span class=\"line\">注：    :---- 为左对齐 ， ----:为右对齐</span><br></pre></td></tr></table></figure>\n<p>output:</p>\n<table>\n<thead>\n<tr>\n<th>标题1</th>\n<th style=\"text-align:left\">标题2</th>\n<th style=\"text-align:right\">标题3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>lab1</td>\n<td style=\"text-align:left\">lab2</td>\n<td style=\"text-align:right\">lab3  </td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"下划线\"><a href=\"#下划线\" class=\"headerlink\" title=\"下划线\"></a>下划线</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">----</span><br></pre></td></tr></table></figure>\n<p>output:</p>\n<hr>\n<h2 id=\"空格和换行\"><a href=\"#空格和换行\" class=\"headerlink\" title=\"空格和换行\"></a>空格和换行</h2><p>####空格<br>1.按shift + space 切换为全角模式，输入空格就有效<br>2.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;bsp; aa</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"换行\"><a href=\"#换行\" class=\"headerlink\" title=\"换行\"></a>换行</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;br/&gt;</span><br><span class=\"line\">下行文本</span><br></pre></td></tr></table></figure>\n<p>output:<br><br><br>aa</p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<p>　　　　　　　　　　　　　　　　　　　　　Written by xblin</p>\n<p><img src=\"http://wx4.sinaimg.cn/large/007fPWmPly1fy41o22i1gj3074074q3p.jpg\" alt=\"logo\"></p>\n<h2 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 一级标题</span><br><span class=\"line\">## 二级标题</span><br><span class=\"line\">### 三级标题</span><br><span class=\"line\">#### 四级标题</span><br><span class=\"line\">##### 五级标题</span><br><span class=\"line\">###### 六级标题</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：# 和「一级标题」之间建议保留一个字符的空格，这是最标准的 Markdown 写法</p>\n</blockquote>\n<h2 id=\"代码注释\"><a href=\"#代码注释\" class=\"headerlink\" title=\"代码注释\"></a>代码注释</h2><h4 id=\"1-单行注释\"><a href=\"#1-单行注释\" class=\"headerlink\" title=\"1.单行注释\"></a>1.单行注释</h4><p><code>code</code></p>\n<h4 id=\"2-多行注释\"><a href=\"#2-多行注释\" class=\"headerlink\" title=\"2.多行注释\"></a>2.多行注释</h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;iostream&gt;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>&#123;</span><br><span class=\"line\">    count &lt;&lt;<span class=\"string\">\"hello world!\"</span>&lt;&lt;<span class=\"built_in\">endl</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><h4 id=\"1-无序列表\"><a href=\"#1-无序列表\" class=\"headerlink\" title=\"1.无序列表\"></a>1.无序列表</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 文本1</span><br><span class=\"line\">- 文本2</span><br><span class=\"line\">- 文本3</span><br></pre></td></tr></table></figure>\n<p>output：</p>\n<ul>\n<li>文本1</li>\n<li>文本2</li>\n<li>文本3</li>\n</ul>\n<h4 id=\"2-有序列表\"><a href=\"#2-有序列表\" class=\"headerlink\" title=\"2.有序列表\"></a>2.有序列表</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 文本1</span><br><span class=\"line\">2. 文本2</span><br><span class=\"line\">3. 文本3</span><br></pre></td></tr></table></figure>\n<h2 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">标题1 | 标题2 | 标题3 |</span><br><span class=\"line\">----- | :---- | ----: |</span><br><span class=\"line\">lab1  | lab2  | lab3  |</span><br><span class=\"line\"></span><br><span class=\"line\">注：    :---- 为左对齐 ， ----:为右对齐</span><br></pre></td></tr></table></figure>\n<p>output:</p>\n<table>\n<thead>\n<tr>\n<th>标题1</th>\n<th style=\"text-align:left\">标题2</th>\n<th style=\"text-align:right\">标题3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>lab1</td>\n<td style=\"text-align:left\">lab2</td>\n<td style=\"text-align:right\">lab3  </td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"下划线\"><a href=\"#下划线\" class=\"headerlink\" title=\"下划线\"></a>下划线</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">----</span><br></pre></td></tr></table></figure>\n<p>output:</p>\n<hr>\n<h2 id=\"空格和换行\"><a href=\"#空格和换行\" class=\"headerlink\" title=\"空格和换行\"></a>空格和换行</h2><p>####空格<br>1.按shift + space 切换为全角模式，输入空格就有效<br>2.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;bsp; aa</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"换行\"><a href=\"#换行\" class=\"headerlink\" title=\"换行\"></a>换行</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;br/&gt;</span><br><span class=\"line\">下行文本</span><br></pre></td></tr></table></figure>\n<p>output:<br><br><br>aa</p>\n<hr>\n"},{"date":"2018-10-29T09:57:00.000Z","status":"public","title":"Vim基本操作","_content":"\n####1.方向移动（hjkl代替方向键移动）tytal\n```\n  k\nh    l    \n  j\n```\n\n####2.插入编辑\n```\ni  a  A  o \n```\n\n####3.删除，替换，复制粘贴\n\n操作| 命令                 |\n----|----------------------|\n删除| x  dw  de  d$ dd  2dd\n替换| rx  R                \n复制| v....v +y   or  yy   \n粘贴| p                    \n\n####4.移动到home和end\n\n```\nhome: 0\nend:  $\nstart： gg\nended： G\n查看文本信息： CTRL+G\n回到前一次编辑的地方： '0\n```\n\n####5.撤销和反撤销\n\n```\n撤销：   u\n反撤销： CTRL-R\n```\n####6.查找和替换\n\n```\n设置显示行号： set nu\n查找 ： /xxx\n查找下(上)一个： n  N\n\n显示该字的关键字： *\n取消高亮显示： nohls\n高亮显示： hls\n\n替换：\n%s/old/new/g\n```\n####7.自动补全\n\n`CTRL-P`\n\n####8.写入文件 or 文件另存为\n\n`:w filename`\n\n\n----\n","source":"_posts/Linux/Vim╗∙▒╛▓┘╫ў.md","raw":"---\ndate: 2018-10-29 09:57\nstatus: public\ntitle: Vim基本操作\ncategories: Linux\ntags: Linux\n---\n\n####1.方向移动（hjkl代替方向键移动）tytal\n```\n  k\nh    l    \n  j\n```\n\n####2.插入编辑\n```\ni  a  A  o \n```\n\n####3.删除，替换，复制粘贴\n\n操作| 命令                 |\n----|----------------------|\n删除| x  dw  de  d$ dd  2dd\n替换| rx  R                \n复制| v....v +y   or  yy   \n粘贴| p                    \n\n####4.移动到home和end\n\n```\nhome: 0\nend:  $\nstart： gg\nended： G\n查看文本信息： CTRL+G\n回到前一次编辑的地方： '0\n```\n\n####5.撤销和反撤销\n\n```\n撤销：   u\n反撤销： CTRL-R\n```\n####6.查找和替换\n\n```\n设置显示行号： set nu\n查找 ： /xxx\n查找下(上)一个： n  N\n\n显示该字的关键字： *\n取消高亮显示： nohls\n高亮显示： hls\n\n替换：\n%s/old/new/g\n```\n####7.自动补全\n\n`CTRL-P`\n\n####8.写入文件 or 文件另存为\n\n`:w filename`\n\n\n----\n","slug":"Linux/Vim╗∙▒╛▓┘╫ў","published":1,"updated":"2018-12-18T03:55:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjptii4g9000zafpp6d0ybu6w","content":"<p>####1.方向移动（hjkl代替方向键移动）tytal<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  k</span><br><span class=\"line\">h    l    </span><br><span class=\"line\">  j</span><br></pre></td></tr></table></figure></p>\n<p>####2.插入编辑<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i  a  A  o</span><br></pre></td></tr></table></figure></p>\n<p>####3.删除，替换，复制粘贴</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>命令</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>删除</td>\n<td>x  dw  de  d$ dd  2dd</td>\n</tr>\n<tr>\n<td>替换</td>\n<td>rx  R                </td>\n</tr>\n<tr>\n<td>复制</td>\n<td>v….v +y   or  yy   </td>\n</tr>\n<tr>\n<td>粘贴</td>\n<td>p                    </td>\n</tr>\n</tbody>\n</table>\n<p>####4.移动到home和end</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">home: 0</span><br><span class=\"line\">end:  $</span><br><span class=\"line\">start： gg</span><br><span class=\"line\">ended： G</span><br><span class=\"line\">查看文本信息： CTRL+G</span><br><span class=\"line\">回到前一次编辑的地方： &apos;0</span><br></pre></td></tr></table></figure>\n<p>####5.撤销和反撤销</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">撤销：   u</span><br><span class=\"line\">反撤销： CTRL-R</span><br></pre></td></tr></table></figure>\n<p>####6.查找和替换</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">设置显示行号： set nu</span><br><span class=\"line\">查找 ： /xxx</span><br><span class=\"line\">查找下(上)一个： n  N</span><br><span class=\"line\"></span><br><span class=\"line\">显示该字的关键字： *</span><br><span class=\"line\">取消高亮显示： nohls</span><br><span class=\"line\">高亮显示： hls</span><br><span class=\"line\"></span><br><span class=\"line\">替换：</span><br><span class=\"line\">%s/old/new/g</span><br></pre></td></tr></table></figure>\n<p>####7.自动补全</p>\n<p><code>CTRL-P</code></p>\n<p>####8.写入文件 or 文件另存为</p>\n<p><code>:w filename</code></p>\n<hr>\n","site":{"data":{}},"excerpt":"","more":"<p>####1.方向移动（hjkl代替方向键移动）tytal<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  k</span><br><span class=\"line\">h    l    </span><br><span class=\"line\">  j</span><br></pre></td></tr></table></figure></p>\n<p>####2.插入编辑<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">i  a  A  o</span><br></pre></td></tr></table></figure></p>\n<p>####3.删除，替换，复制粘贴</p>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>命令</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>删除</td>\n<td>x  dw  de  d$ dd  2dd</td>\n</tr>\n<tr>\n<td>替换</td>\n<td>rx  R                </td>\n</tr>\n<tr>\n<td>复制</td>\n<td>v….v +y   or  yy   </td>\n</tr>\n<tr>\n<td>粘贴</td>\n<td>p                    </td>\n</tr>\n</tbody>\n</table>\n<p>####4.移动到home和end</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">home: 0</span><br><span class=\"line\">end:  $</span><br><span class=\"line\">start： gg</span><br><span class=\"line\">ended： G</span><br><span class=\"line\">查看文本信息： CTRL+G</span><br><span class=\"line\">回到前一次编辑的地方： &apos;0</span><br></pre></td></tr></table></figure>\n<p>####5.撤销和反撤销</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">撤销：   u</span><br><span class=\"line\">反撤销： CTRL-R</span><br></pre></td></tr></table></figure>\n<p>####6.查找和替换</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">设置显示行号： set nu</span><br><span class=\"line\">查找 ： /xxx</span><br><span class=\"line\">查找下(上)一个： n  N</span><br><span class=\"line\"></span><br><span class=\"line\">显示该字的关键字： *</span><br><span class=\"line\">取消高亮显示： nohls</span><br><span class=\"line\">高亮显示： hls</span><br><span class=\"line\"></span><br><span class=\"line\">替换：</span><br><span class=\"line\">%s/old/new/g</span><br></pre></td></tr></table></figure>\n<p>####7.自动补全</p>\n<p><code>CTRL-P</code></p>\n<p>####8.写入文件 or 文件另存为</p>\n<p><code>:w filename</code></p>\n<hr>\n"},{"date":"2018-10-29T20:35:00.000Z","status":"public","title":"欧拉计划第三题","_content":"\nThe prime factors of 13195 are 5, 7, 13 and 29.\n\nWhat is the largest prime factor of the number 600851475143 ?\n\n13195的主要素因子是5,7,13和29。\n\n600851475143的最大素因子是什么？\n\n##### 答案：6857\n\n#### 思路\n\n我们可以知道任意的合数可以由两个数相乘得来，如c = a * b，假设a<= b，则 a<=根号c，b>=根号c。\n\n注意：\n\n1.所求数字太大，用宏定义使代码不冗余\n\n2.当num不为1时，表明它的最大素因子是它本身\n\n```c\n#include <stdio.h>\n#include <inttypes.h>\n\n#define NUM 600851475143\n\nint main(){\n\tint64_t num = NUM;\n\tint64_t prime_max;\n\tfor(int64_t i = 2; i * i <= NUM; i++){\n\t\twhile(num % i == 0){\n\t\t\tnum /= i;\n\t\t\tprime_max = i;\n\t\t}\n\t}\n\tif(num != 1) prime_max = num;\n\tprintf(\"%\"PRId64\"\\n\", prime_max);\n\n\treturn 0;\n}\n```","source":"_posts/Practice/┼╖└н╝╞╗о╡┌╚¤╠т.md","raw":"---\ndate: 2018-10-29 20:35\nstatus: public\ntitle: 欧拉计划第三题\n---\n\nThe prime factors of 13195 are 5, 7, 13 and 29.\n\nWhat is the largest prime factor of the number 600851475143 ?\n\n13195的主要素因子是5,7,13和29。\n\n600851475143的最大素因子是什么？\n\n##### 答案：6857\n\n#### 思路\n\n我们可以知道任意的合数可以由两个数相乘得来，如c = a * b，假设a<= b，则 a<=根号c，b>=根号c。\n\n注意：\n\n1.所求数字太大，用宏定义使代码不冗余\n\n2.当num不为1时，表明它的最大素因子是它本身\n\n```c\n#include <stdio.h>\n#include <inttypes.h>\n\n#define NUM 600851475143\n\nint main(){\n\tint64_t num = NUM;\n\tint64_t prime_max;\n\tfor(int64_t i = 2; i * i <= NUM; i++){\n\t\twhile(num % i == 0){\n\t\t\tnum /= i;\n\t\t\tprime_max = i;\n\t\t}\n\t}\n\tif(num != 1) prime_max = num;\n\tprintf(\"%\"PRId64\"\\n\", prime_max);\n\n\treturn 0;\n}\n```","slug":"Practice/┼╖└н╝╞╗о╡┌╚¤╠т","published":1,"updated":"2018-12-18T03:55:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjptii4gh0012afppk9phcglf","content":"<p>The prime factors of 13195 are 5, 7, 13 and 29.</p>\n<p>What is the largest prime factor of the number 600851475143 ?</p>\n<p>13195的主要素因子是5,7,13和29。</p>\n<p>600851475143的最大素因子是什么？</p>\n<h5 id=\"答案：6857\"><a href=\"#答案：6857\" class=\"headerlink\" title=\"答案：6857\"></a>答案：6857</h5><h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>我们可以知道任意的合数可以由两个数相乘得来，如c = a * b，假设a&lt;= b，则 a&lt;=根号c，b&gt;=根号c。</p>\n<p>注意：</p>\n<p>1.所求数字太大，用宏定义使代码不冗余</p>\n<p>2.当num不为1时，表明它的最大素因子是它本身</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;inttypes.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NUM 600851475143</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int64_t</span> num = NUM;</span><br><span class=\"line\">\t<span class=\"keyword\">int64_t</span> prime_max;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int64_t</span> i = <span class=\"number\">2</span>; i * i &lt;= NUM; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(num % i == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\tnum /= i;</span><br><span class=\"line\">\t\t\tprime_max = i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(num != <span class=\"number\">1</span>) prime_max = num;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%\"</span>PRId64<span class=\"string\">\"\\n\"</span>, prime_max);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>The prime factors of 13195 are 5, 7, 13 and 29.</p>\n<p>What is the largest prime factor of the number 600851475143 ?</p>\n<p>13195的主要素因子是5,7,13和29。</p>\n<p>600851475143的最大素因子是什么？</p>\n<h5 id=\"答案：6857\"><a href=\"#答案：6857\" class=\"headerlink\" title=\"答案：6857\"></a>答案：6857</h5><h4 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h4><p>我们可以知道任意的合数可以由两个数相乘得来，如c = a * b，假设a&lt;= b，则 a&lt;=根号c，b&gt;=根号c。</p>\n<p>注意：</p>\n<p>1.所求数字太大，用宏定义使代码不冗余</p>\n<p>2.当num不为1时，表明它的最大素因子是它本身</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;inttypes.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> NUM 600851475143</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int64_t</span> num = NUM;</span><br><span class=\"line\">\t<span class=\"keyword\">int64_t</span> prime_max;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int64_t</span> i = <span class=\"number\">2</span>; i * i &lt;= NUM; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span>(num % i == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\tnum /= i;</span><br><span class=\"line\">\t\t\tprime_max = i;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(num != <span class=\"number\">1</span>) prime_max = num;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%\"</span>PRId64<span class=\"string\">\"\\n\"</span>, prime_max);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"date":"2018-10-29T20:34:00.000Z","status":"public","title":"欧拉计划第二题","_content":"\nEach new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:\n\n1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n\nBy considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.\n\nFibonacci序列中的每个新术语都是通过添加前两个术语生成的。从1和2开始，前10个术语将是：\n\n1,2,3,5,8,13,21,34,55,89 ......\n\n通过考虑Fibonacci序列中的值不超过四百万的项，找到偶数项的总和。\n\n##### 答案：4613732\n\n#### 1.暴力求解法—开辟数组法\n\n从题中我们可以想到一种方法就是开数组，将得到的Fibonacci数放到数组中，一步一步循环相加\n\n（1）用f[0]做计数器，记录有多少个Fibonacci数；\n\n（2）用f[f[0]] = f[f[0] - 1] + f[f[0] - 2]计算Fibonacci数\n\n```c\n#include <stdio.h>\n\n\nint main(){\n\tint f[500] = {0};\n\tf[0] = 2;\n\tf[1] = 1;\n\tf[2] = 2;\n\twhile (f[f[0]] < 4000000) {\n\t\tf[0]++;\n\t\tf[f[0]] = f[f[0] - 1] + f[f[0] - 2];\n\t}\n\tint sum = 0;\n\tfor(int i = 1; i <= f[0]; i++){\n\t\tif(f[i] % 2 == 0) sum += f[i];\n\t}\n\tprintf(\"%d\\n\", sum);\n\t\n\treturn 0;\n}\n```\n\n#### 2.优化开辟数组法\n\n其实我们并不需要开辟那么大的数组记录全部的Fbionacci数，只需要开辟一个大小为3的数组即可，大大减小了空间\n\n通过考虑Fibonacci序列中的值不超过四百万的项，找到偶数项的总和。\n\n```c\n#include <stdio.h>\n\n\nint main(){\n\tint f[3] = {0};\n\tf[0] = 1;\n\tf[1] = 2;\n\tint sum = 0;\n\tfor(int i = 2; f[2] < 4000000; i++){\n\t\tf[i % 3] = f[(i - 1) % 3] + f[(i - 2) % 3];\n\t\tif(f[i % 3] % 2 == 0){\n\t\t\tsum += f[i % 3];\n\t\t}\n\t}\n\tprintf(\"%d\\n\", sum + 2);\n\treturn 0;\n}\n```\n\n#### 3.最优版plus\n\n由于我们只需要不断更新一个Fibonacci数，就可以进行求和运算，所以我们并不需要开辟数组，只需要不断更新b的值就可以了。\n\n通过考虑Fibonacci序列中的值不超过四百万的项，找到偶数项的总和。\n\n```c\n#include <stdio.h>\n\n\nint main(){\n\tint a = 1, b = 1, c;\n\tint sum = 0;\n\twhile(b < 4000000){\n\t\tif(b % 2 == 0) sum += b;\n\t\tc = b;\n\t\tb = b + a;\n\t\ta = c;\n\t}\n\tprintf(\"%d\\n\", sum);\n\treturn 0;\n}\n```","source":"_posts/Practice/┼╖└н╝╞╗о╡┌╢■╠т.md","raw":"---\ndate: 2018-10-29 20:34\nstatus: public\ntitle: 欧拉计划第二题\n---\n\nEach new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:\n\n1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...\n\nBy considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.\n\nFibonacci序列中的每个新术语都是通过添加前两个术语生成的。从1和2开始，前10个术语将是：\n\n1,2,3,5,8,13,21,34,55,89 ......\n\n通过考虑Fibonacci序列中的值不超过四百万的项，找到偶数项的总和。\n\n##### 答案：4613732\n\n#### 1.暴力求解法—开辟数组法\n\n从题中我们可以想到一种方法就是开数组，将得到的Fibonacci数放到数组中，一步一步循环相加\n\n（1）用f[0]做计数器，记录有多少个Fibonacci数；\n\n（2）用f[f[0]] = f[f[0] - 1] + f[f[0] - 2]计算Fibonacci数\n\n```c\n#include <stdio.h>\n\n\nint main(){\n\tint f[500] = {0};\n\tf[0] = 2;\n\tf[1] = 1;\n\tf[2] = 2;\n\twhile (f[f[0]] < 4000000) {\n\t\tf[0]++;\n\t\tf[f[0]] = f[f[0] - 1] + f[f[0] - 2];\n\t}\n\tint sum = 0;\n\tfor(int i = 1; i <= f[0]; i++){\n\t\tif(f[i] % 2 == 0) sum += f[i];\n\t}\n\tprintf(\"%d\\n\", sum);\n\t\n\treturn 0;\n}\n```\n\n#### 2.优化开辟数组法\n\n其实我们并不需要开辟那么大的数组记录全部的Fbionacci数，只需要开辟一个大小为3的数组即可，大大减小了空间\n\n通过考虑Fibonacci序列中的值不超过四百万的项，找到偶数项的总和。\n\n```c\n#include <stdio.h>\n\n\nint main(){\n\tint f[3] = {0};\n\tf[0] = 1;\n\tf[1] = 2;\n\tint sum = 0;\n\tfor(int i = 2; f[2] < 4000000; i++){\n\t\tf[i % 3] = f[(i - 1) % 3] + f[(i - 2) % 3];\n\t\tif(f[i % 3] % 2 == 0){\n\t\t\tsum += f[i % 3];\n\t\t}\n\t}\n\tprintf(\"%d\\n\", sum + 2);\n\treturn 0;\n}\n```\n\n#### 3.最优版plus\n\n由于我们只需要不断更新一个Fibonacci数，就可以进行求和运算，所以我们并不需要开辟数组，只需要不断更新b的值就可以了。\n\n通过考虑Fibonacci序列中的值不超过四百万的项，找到偶数项的总和。\n\n```c\n#include <stdio.h>\n\n\nint main(){\n\tint a = 1, b = 1, c;\n\tint sum = 0;\n\twhile(b < 4000000){\n\t\tif(b % 2 == 0) sum += b;\n\t\tc = b;\n\t\tb = b + a;\n\t\ta = c;\n\t}\n\tprintf(\"%d\\n\", sum);\n\treturn 0;\n}\n```","slug":"Practice/┼╖└н╝╞╗о╡┌╢■╠т","published":1,"updated":"2018-12-18T03:55:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjptii4gm0017afpp4ogn4lzg","content":"<p>Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:</p>\n<p>1, 2, 3, 5, 8, 13, 21, 34, 55, 89, …</p>\n<p>By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.</p>\n<p>Fibonacci序列中的每个新术语都是通过添加前两个术语生成的。从1和2开始，前10个术语将是：</p>\n<p>1,2,3,5,8,13,21,34,55,89 ……</p>\n<p>通过考虑Fibonacci序列中的值不超过四百万的项，找到偶数项的总和。</p>\n<h5 id=\"答案：4613732\"><a href=\"#答案：4613732\" class=\"headerlink\" title=\"答案：4613732\"></a>答案：4613732</h5><h4 id=\"1-暴力求解法—开辟数组法\"><a href=\"#1-暴力求解法—开辟数组法\" class=\"headerlink\" title=\"1.暴力求解法—开辟数组法\"></a>1.暴力求解法—开辟数组法</h4><p>从题中我们可以想到一种方法就是开数组，将得到的Fibonacci数放到数组中，一步一步循环相加</p>\n<p>（1）用f[0]做计数器，记录有多少个Fibonacci数；</p>\n<p>（2）用f[f[0]] = f[f[0] - 1] + f[f[0] - 2]计算Fibonacci数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> f[<span class=\"number\">500</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\tf[<span class=\"number\">0</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">\tf[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tf[<span class=\"number\">2</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (f[f[<span class=\"number\">0</span>]] &lt; <span class=\"number\">4000000</span>) &#123;</span><br><span class=\"line\">\t\tf[<span class=\"number\">0</span>]++;</span><br><span class=\"line\">\t\tf[f[<span class=\"number\">0</span>]] = f[f[<span class=\"number\">0</span>] - <span class=\"number\">1</span>] + f[f[<span class=\"number\">0</span>] - <span class=\"number\">2</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= f[<span class=\"number\">0</span>]; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(f[i] % <span class=\"number\">2</span> == <span class=\"number\">0</span>) sum += f[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, sum);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-优化开辟数组法\"><a href=\"#2-优化开辟数组法\" class=\"headerlink\" title=\"2.优化开辟数组法\"></a>2.优化开辟数组法</h4><p>其实我们并不需要开辟那么大的数组记录全部的Fbionacci数，只需要开辟一个大小为3的数组即可，大大减小了空间</p>\n<p>通过考虑Fibonacci序列中的值不超过四百万的项，找到偶数项的总和。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> f[<span class=\"number\">3</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\tf[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tf[<span class=\"number\">1</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; f[<span class=\"number\">2</span>] &lt; <span class=\"number\">4000000</span>; i++)&#123;</span><br><span class=\"line\">\t\tf[i % <span class=\"number\">3</span>] = f[(i - <span class=\"number\">1</span>) % <span class=\"number\">3</span>] + f[(i - <span class=\"number\">2</span>) % <span class=\"number\">3</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(f[i % <span class=\"number\">3</span>] % <span class=\"number\">2</span> == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\tsum += f[i % <span class=\"number\">3</span>];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, sum + <span class=\"number\">2</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-最优版plus\"><a href=\"#3-最优版plus\" class=\"headerlink\" title=\"3.最优版plus\"></a>3.最优版plus</h4><p>由于我们只需要不断更新一个Fibonacci数，就可以进行求和运算，所以我们并不需要开辟数组，只需要不断更新b的值就可以了。</p>\n<p>通过考虑Fibonacci序列中的值不超过四百万的项，找到偶数项的总和。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">1</span>, c;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(b &lt; <span class=\"number\">4000000</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(b % <span class=\"number\">2</span> == <span class=\"number\">0</span>) sum += b;</span><br><span class=\"line\">\t\tc = b;</span><br><span class=\"line\">\t\tb = b + a;</span><br><span class=\"line\">\t\ta = c;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, sum);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:</p>\n<p>1, 2, 3, 5, 8, 13, 21, 34, 55, 89, …</p>\n<p>By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.</p>\n<p>Fibonacci序列中的每个新术语都是通过添加前两个术语生成的。从1和2开始，前10个术语将是：</p>\n<p>1,2,3,5,8,13,21,34,55,89 ……</p>\n<p>通过考虑Fibonacci序列中的值不超过四百万的项，找到偶数项的总和。</p>\n<h5 id=\"答案：4613732\"><a href=\"#答案：4613732\" class=\"headerlink\" title=\"答案：4613732\"></a>答案：4613732</h5><h4 id=\"1-暴力求解法—开辟数组法\"><a href=\"#1-暴力求解法—开辟数组法\" class=\"headerlink\" title=\"1.暴力求解法—开辟数组法\"></a>1.暴力求解法—开辟数组法</h4><p>从题中我们可以想到一种方法就是开数组，将得到的Fibonacci数放到数组中，一步一步循环相加</p>\n<p>（1）用f[0]做计数器，记录有多少个Fibonacci数；</p>\n<p>（2）用f[f[0]] = f[f[0] - 1] + f[f[0] - 2]计算Fibonacci数</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> f[<span class=\"number\">500</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\tf[<span class=\"number\">0</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">\tf[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tf[<span class=\"number\">2</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span> (f[f[<span class=\"number\">0</span>]] &lt; <span class=\"number\">4000000</span>) &#123;</span><br><span class=\"line\">\t\tf[<span class=\"number\">0</span>]++;</span><br><span class=\"line\">\t\tf[f[<span class=\"number\">0</span>]] = f[f[<span class=\"number\">0</span>] - <span class=\"number\">1</span>] + f[f[<span class=\"number\">0</span>] - <span class=\"number\">2</span>];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt;= f[<span class=\"number\">0</span>]; i++)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(f[i] % <span class=\"number\">2</span> == <span class=\"number\">0</span>) sum += f[i];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, sum);</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-优化开辟数组法\"><a href=\"#2-优化开辟数组法\" class=\"headerlink\" title=\"2.优化开辟数组法\"></a>2.优化开辟数组法</h4><p>其实我们并不需要开辟那么大的数组记录全部的Fbionacci数，只需要开辟一个大小为3的数组即可，大大减小了空间</p>\n<p>通过考虑Fibonacci序列中的值不超过四百万的项，找到偶数项的总和。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> f[<span class=\"number\">3</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">\tf[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">\tf[<span class=\"number\">1</span>] = <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">2</span>; f[<span class=\"number\">2</span>] &lt; <span class=\"number\">4000000</span>; i++)&#123;</span><br><span class=\"line\">\t\tf[i % <span class=\"number\">3</span>] = f[(i - <span class=\"number\">1</span>) % <span class=\"number\">3</span>] + f[(i - <span class=\"number\">2</span>) % <span class=\"number\">3</span>];</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(f[i % <span class=\"number\">3</span>] % <span class=\"number\">2</span> == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\tsum += f[i % <span class=\"number\">3</span>];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, sum + <span class=\"number\">2</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-最优版plus\"><a href=\"#3-最优版plus\" class=\"headerlink\" title=\"3.最优版plus\"></a>3.最优版plus</h4><p>由于我们只需要不断更新一个Fibonacci数，就可以进行求和运算，所以我们并不需要开辟数组，只需要不断更新b的值就可以了。</p>\n<p>通过考虑Fibonacci序列中的值不超过四百万的项，找到偶数项的总和。</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> a = <span class=\"number\">1</span>, b = <span class=\"number\">1</span>, c;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(b &lt; <span class=\"number\">4000000</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(b % <span class=\"number\">2</span> == <span class=\"number\">0</span>) sum += b;</span><br><span class=\"line\">\t\tc = b;</span><br><span class=\"line\">\t\tb = b + a;</span><br><span class=\"line\">\t\ta = c;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, sum);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"date":"2018-10-29T20:29:00.000Z","status":"public","title":"欧拉计划第一题","_content":"\nIf we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.\n\nFind the sum of all the multiples of 3 or 5 below 1000.\n\n如果我们列出所有低于10的自然数是3或5的倍数，我们得到3,5,6和9，这些倍数的总和为23。\n\n找到1000以下所有3或5的倍数的总和。\n\n##### 答案为233168\n\n#### 1.暴力求解法\n\n从1遍历到1000，将能被3和5整除的数相加到sum中，注意存在既能整除3又能整除5的数，所以用或运算\n\n```C\n#include <stdio.h>\n\nint main(){\n    int sum = 0;\n    for(int i = 1; i < 1000; i++){\n        if((i % 3 == 0) || (i % 5 == 0)){\n            sum += i;\n        }\n    }\n    printf(\"%d\\n\", sum);\n    \n    return 0;\n}\n```\n\n#### 2.技巧求解法\n\n由于我们初中的时候求过等差数列的求和运算，所以在这里，我们并不需要花费那么多时间去遍历，于是我们巧用公式等差数列的求和公式= （首相 + 末项） * 项数 ／ 2；\n\n注意：在这里能被3和5同时整除的数加了两次，所以我们需要把重复加的数字通过公式减下去\n\n```C\n#include <stdio.h>\n\nint main(){\n\tint sum3, sum5, sum15;\n\tsum3 = (3 + 999) * (999 / 3) / 2;\n\tsum5 = (5 + 995) * (995 / 5) / 2;\n\tsum15 = (15 + 990) * (990 / 15) / 2;\n\tprintf(\"%d\\n\", sum3 + sum5 - sum15);\n    \n    return 0;\n}\n```","source":"_posts/Practice/┼╖└н╝╞╗о╡┌╥╗╠т.md","raw":"---\ndate: 2018-10-29 20:29\nstatus: public\ntitle: 欧拉计划第一题\n---\n\nIf we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.\n\nFind the sum of all the multiples of 3 or 5 below 1000.\n\n如果我们列出所有低于10的自然数是3或5的倍数，我们得到3,5,6和9，这些倍数的总和为23。\n\n找到1000以下所有3或5的倍数的总和。\n\n##### 答案为233168\n\n#### 1.暴力求解法\n\n从1遍历到1000，将能被3和5整除的数相加到sum中，注意存在既能整除3又能整除5的数，所以用或运算\n\n```C\n#include <stdio.h>\n\nint main(){\n    int sum = 0;\n    for(int i = 1; i < 1000; i++){\n        if((i % 3 == 0) || (i % 5 == 0)){\n            sum += i;\n        }\n    }\n    printf(\"%d\\n\", sum);\n    \n    return 0;\n}\n```\n\n#### 2.技巧求解法\n\n由于我们初中的时候求过等差数列的求和运算，所以在这里，我们并不需要花费那么多时间去遍历，于是我们巧用公式等差数列的求和公式= （首相 + 末项） * 项数 ／ 2；\n\n注意：在这里能被3和5同时整除的数加了两次，所以我们需要把重复加的数字通过公式减下去\n\n```C\n#include <stdio.h>\n\nint main(){\n\tint sum3, sum5, sum15;\n\tsum3 = (3 + 999) * (999 / 3) / 2;\n\tsum5 = (5 + 995) * (995 / 5) / 2;\n\tsum15 = (15 + 990) * (990 / 15) / 2;\n\tprintf(\"%d\\n\", sum3 + sum5 - sum15);\n    \n    return 0;\n}\n```","slug":"Practice/┼╖└н╝╞╗о╡┌╥╗╠т","published":1,"updated":"2018-12-18T03:55:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjptii4gr001aafpp9ad2ecuh","content":"<p>If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.</p>\n<p>Find the sum of all the multiples of 3 or 5 below 1000.</p>\n<p>如果我们列出所有低于10的自然数是3或5的倍数，我们得到3,5,6和9，这些倍数的总和为23。</p>\n<p>找到1000以下所有3或5的倍数的总和。</p>\n<h5 id=\"答案为233168\"><a href=\"#答案为233168\" class=\"headerlink\" title=\"答案为233168\"></a>答案为233168</h5><h4 id=\"1-暴力求解法\"><a href=\"#1-暴力求解法\" class=\"headerlink\" title=\"1.暴力求解法\"></a>1.暴力求解法</h4><p>从1遍历到1000，将能被3和5整除的数相加到sum中，注意存在既能整除3又能整除5的数，所以用或运算</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">1000</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((i % <span class=\"number\">3</span> == <span class=\"number\">0</span>) || (i % <span class=\"number\">5</span> == <span class=\"number\">0</span>))&#123;</span><br><span class=\"line\">            sum += i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, sum);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-技巧求解法\"><a href=\"#2-技巧求解法\" class=\"headerlink\" title=\"2.技巧求解法\"></a>2.技巧求解法</h4><p>由于我们初中的时候求过等差数列的求和运算，所以在这里，我们并不需要花费那么多时间去遍历，于是我们巧用公式等差数列的求和公式= （首相 + 末项） * 项数 ／ 2；</p>\n<p>注意：在这里能被3和5同时整除的数加了两次，所以我们需要把重复加的数字通过公式减下去</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> sum3, sum5, sum15;</span><br><span class=\"line\">\tsum3 = (<span class=\"number\">3</span> + <span class=\"number\">999</span>) * (<span class=\"number\">999</span> / <span class=\"number\">3</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\tsum5 = (<span class=\"number\">5</span> + <span class=\"number\">995</span>) * (<span class=\"number\">995</span> / <span class=\"number\">5</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\tsum15 = (<span class=\"number\">15</span> + <span class=\"number\">990</span>) * (<span class=\"number\">990</span> / <span class=\"number\">15</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, sum3 + sum5 - sum15);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.</p>\n<p>Find the sum of all the multiples of 3 or 5 below 1000.</p>\n<p>如果我们列出所有低于10的自然数是3或5的倍数，我们得到3,5,6和9，这些倍数的总和为23。</p>\n<p>找到1000以下所有3或5的倍数的总和。</p>\n<h5 id=\"答案为233168\"><a href=\"#答案为233168\" class=\"headerlink\" title=\"答案为233168\"></a>答案为233168</h5><h4 id=\"1-暴力求解法\"><a href=\"#1-暴力求解法\" class=\"headerlink\" title=\"1.暴力求解法\"></a>1.暴力求解法</h4><p>从1遍历到1000，将能被3和5整除的数相加到sum中，注意存在既能整除3又能整除5的数，所以用或运算</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; <span class=\"number\">1000</span>; i++)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((i % <span class=\"number\">3</span> == <span class=\"number\">0</span>) || (i % <span class=\"number\">5</span> == <span class=\"number\">0</span>))&#123;</span><br><span class=\"line\">            sum += i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, sum);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-技巧求解法\"><a href=\"#2-技巧求解法\" class=\"headerlink\" title=\"2.技巧求解法\"></a>2.技巧求解法</h4><p>由于我们初中的时候求过等差数列的求和运算，所以在这里，我们并不需要花费那么多时间去遍历，于是我们巧用公式等差数列的求和公式= （首相 + 末项） * 项数 ／ 2；</p>\n<p>注意：在这里能被3和5同时整除的数加了两次，所以我们需要把重复加的数字通过公式减下去</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">int</span> sum3, sum5, sum15;</span><br><span class=\"line\">\tsum3 = (<span class=\"number\">3</span> + <span class=\"number\">999</span>) * (<span class=\"number\">999</span> / <span class=\"number\">3</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\tsum5 = (<span class=\"number\">5</span> + <span class=\"number\">995</span>) * (<span class=\"number\">995</span> / <span class=\"number\">5</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\tsum15 = (<span class=\"number\">15</span> + <span class=\"number\">990</span>) * (<span class=\"number\">990</span> / <span class=\"number\">15</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, sum3 + sum5 - sum15);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"date":"2018-10-29T20:38:00.000Z","status":"public","title":"刷题笔记","_content":"\n#### 1. 等差数列的求和公式= （首相 + 末项） * 项数 ／ 2；\n","source":"_posts/Practice/╦в╠т▒╩╝╟.md","raw":"---\ndate: 2018-10-29 20:38\nstatus: public\ntitle: 刷题笔记\ncategories: Practice\ntags: Practice\n---\n\n#### 1. 等差数列的求和公式= （首相 + 末项） * 项数 ／ 2；\n","slug":"Practice/╦в╠т▒╩╝╟","published":1,"updated":"2018-12-18T03:55:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjptii4gz001dafpp2psljc3x","content":"<h4 id=\"1-等差数列的求和公式-（首相-末项）-项数-／-2；\"><a href=\"#1-等差数列的求和公式-（首相-末项）-项数-／-2；\" class=\"headerlink\" title=\"1. 等差数列的求和公式= （首相 + 末项） * 项数 ／ 2；\"></a>1. 等差数列的求和公式= （首相 + 末项） * 项数 ／ 2；</h4>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"1-等差数列的求和公式-（首相-末项）-项数-／-2；\"><a href=\"#1-等差数列的求和公式-（首相-末项）-项数-／-2；\" class=\"headerlink\" title=\"1. 等差数列的求和公式= （首相 + 末项） * 项数 ／ 2；\"></a>1. 等差数列的求和公式= （首相 + 末项） * 项数 ／ 2；</h4>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjptii4dq0007afpp2z3k73el","category_id":"cjptii4cs0004afpphee19iye","_id":"cjptii4f1000fafpp56nh452t"},{"post_id":"cjptii4c40002afppucst6peb","category_id":"cjptii4cs0004afpphee19iye","_id":"cjptii4fd000kafppdfei93ax"},{"post_id":"cjptii4dv0008afppk2r5xxc2","category_id":"cjptii4cs0004afpphee19iye","_id":"cjptii4fm000nafpp3bsvic8m"},{"post_id":"cjptii4e9000cafppo3mk4wa8","category_id":"cjptii4cs0004afpphee19iye","_id":"cjptii4g0000safppc2l6uvuk"},{"post_id":"cjptii4ck0003afpp91gc2cpz","category_id":"cjptii4cs0004afpphee19iye","_id":"cjptii4g3000vafppy7r5hiia"},{"post_id":"cjptii4d90006afpppa3l38w0","category_id":"cjptii4cs0004afpphee19iye","_id":"cjptii4ge0010afppumbqif67"},{"post_id":"cjptii4fy000rafppicfv0sdd","category_id":"cjptii4fq000oafppx2w34j22","_id":"cjptii4gi0013afppfj4mis4j"},{"post_id":"cjptii4ex000eafpp8mjifo8c","category_id":"cjptii4fq000oafppx2w34j22","_id":"cjptii4gn0018afppefa9rfq2"},{"post_id":"cjptii4g1000uafpp15kaoxme","category_id":"cjptii4fq000oafppx2w34j22","_id":"cjptii4gu001bafppcpdpd5ml"},{"post_id":"cjptii4g9000zafpp6d0ybu6w","category_id":"cjptii4fq000oafppx2w34j22","_id":"cjptii4h2001eafpp08zei0g9"},{"post_id":"cjptii4fb000jafppwvfnwzl9","category_id":"cjptii4fq000oafppx2w34j22","_id":"cjptii4h4001gafpppt8psdes"},{"post_id":"cjptii4fg000mafppo68w3qtt","category_id":"cjptii4fq000oafppx2w34j22","_id":"cjptii4h5001iafppz7ma1rzj"},{"post_id":"cjptii4gz001dafpp2psljc3x","category_id":"cjptii4h4001hafpp0d4ynp8j","_id":"cjptii4ht001mafppy4gzv0ze"}],"PostTag":[{"post_id":"cjptii4dq0007afpp2z3k73el","tag_id":"cjptii4d10005afppidfcbag5","_id":"cjptii4e9000bafppagrnjanh"},{"post_id":"cjptii4c40002afppucst6peb","tag_id":"cjptii4d10005afppidfcbag5","_id":"cjptii4ew000dafpp4r7zd3lf"},{"post_id":"cjptii4dv0008afppk2r5xxc2","tag_id":"cjptii4d10005afppidfcbag5","_id":"cjptii4fb000iafppn0cvhzwn"},{"post_id":"cjptii4e9000cafppo3mk4wa8","tag_id":"cjptii4d10005afppidfcbag5","_id":"cjptii4ff000lafppw8vwjr4s"},{"post_id":"cjptii4ck0003afpp91gc2cpz","tag_id":"cjptii4d10005afppidfcbag5","_id":"cjptii4fx000qafppraa8hme6"},{"post_id":"cjptii4d90006afpppa3l38w0","tag_id":"cjptii4d10005afppidfcbag5","_id":"cjptii4g1000tafpp6qgnc3m3"},{"post_id":"cjptii4fy000rafppicfv0sdd","tag_id":"cjptii4fw000pafppu3cxloge","_id":"cjptii4g8000yafppxq7etsqg"},{"post_id":"cjptii4ex000eafpp8mjifo8c","tag_id":"cjptii4fw000pafppu3cxloge","_id":"cjptii4gg0011afpp9e2n0nkl"},{"post_id":"cjptii4g9000zafpp6d0ybu6w","tag_id":"cjptii4fw000pafppu3cxloge","_id":"cjptii4gl0016afppg4qxlcna"},{"post_id":"cjptii4fb000jafppwvfnwzl9","tag_id":"cjptii4g6000xafpphytczq4w","_id":"cjptii4gq0019afppya6vtl23"},{"post_id":"cjptii4fg000mafppo68w3qtt","tag_id":"cjptii4gl0015afppulk8o56e","_id":"cjptii4h3001fafppuriznpxn"},{"post_id":"cjptii4g1000uafpp15kaoxme","tag_id":"cjptii4gv001cafpp2ba7j8qb","_id":"cjptii4h6001kafppq78mlppt"},{"post_id":"cjptii4gz001dafpp2psljc3x","tag_id":"cjptii4h5001jafpp9kooyope","_id":"cjptii4ht001lafpp6rcyci5a"}],"Tag":[{"name":"Algorithm","_id":"cjptii4d10005afppidfcbag5"},{"name":"Linux","_id":"cjptii4fw000pafppu3cxloge"},{"name":"Http","_id":"cjptii4g6000xafpphytczq4w"},{"name":"K8s","_id":"cjptii4gl0015afppulk8o56e"},{"name":"Markdown","_id":"cjptii4gv001cafpp2ba7j8qb"},{"name":"Practice","_id":"cjptii4h5001jafpp9kooyope"}]}}